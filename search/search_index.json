{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang Di Halaman Tugas Penambangan Data \u00b6 Nama : Ach. Faisol S. Arifin NRP : 180411100073 Kelas : Penambangan Data 5D Dosen Pengampu : MULA'AB, S.Si., M.Kom Jurusan : Teknik Informatika Alamat : Desa Meddelan, Kec. Lenteng, Kab. Sumenep","title":"Index"},{"location":"#selamat-datang-di-halaman-tugas-penambangan-data","text":"Nama : Ach. Faisol S. Arifin NRP : 180411100073 Kelas : Penambangan Data 5D Dosen Pengampu : MULA'AB, S.Si., M.Kom Jurusan : Teknik Informatika Alamat : Desa Meddelan, Kec. Lenteng, Kab. Sumenep","title":"Selamat Datang Di Halaman Tugas Penambangan Data"},{"location":"Distance/","text":"Mengukur Jarak Data \u00b6 Mengukur Jarak Tipe Numerik \u00b6 Salah satu tantangan dalam era ini dengan datatabase yang memiliki banyak tipe data. Mengukur jarak adalah komponen utama dalam algoritma clustering berbasis jarak. Alogritma seperti Algoritma Partisioning misal K-Mean, K-medoidm dan fuzzy c-mean dan rough clustering bergantung pada jarak untuk melakukan pengelompokkan. Ada beberapa cara untuk menghitung similaritas atau jarak dari dari data tipe numerik, diantaranya: Minkowski Distance \u00b6 Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, yang menjadi kasus khusus dari Minkowski distance. Minkowski distance dinyatakan dengan: $$ d _ { \\operatorname { min } } = ( \\ sum _ { i = 1 } ^ { n } | x _ { i } - y _ { i } | ^ { m } ) ^ { \\frac { 1 } { m } } , m \\geq 1 $$ Diman $ m $ adalah bilangan riel positif dan $ x_i $ dan $ y_i $ adalah dua vektor dalam runang dimensi $ n $ Implementasi ukuran jarak Minkowski pada model clustering data atribut dilakukan normalisasi untuk menghindari dominasi dari atribut yang memiliki skala data besar. Manhattan Distance \u00b6 Manhattan distance adalah kasus khsusu dari jarak Minkowski distance pada m = 1. Seperti Minkowski Distance, Manhattan distance sensitif terhadap outlier. BIla ukuran ini digunakan dalam algoritma clustering , bentuk cluster adalah hyper-rectangular. Ukuran ini didefinisikan dengan: $$ d _ { \\operatorname { man } } = \\sum _ { i = 1 } ^ { n } \\left| x _ { i } - y _ { i } \\right| $$ Euiclidian Distance \u00b6 Jarak yang paling terkenal yang digunakan untuk data numerik adalah jarak Euclidean. Ini adalah kasus khusus dari jarak Minkowski ketika m = 2. Jarak Euclidean berkinerja baik ketika digunakan untuk kumpulan data cluster kompak atau terisolasi . Meskipun jarak Euclidean sangat umum dalam pengelompokan, ia memiliki kelemahan: jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkin memiliki jarak yang lebih kecil daripada pasangan vektor data lainnya yang mengandung nilai atribut yang sama. Masalah lain dengan jarak Euclidean sebagai fitur skala terbesar akan mendominasi yang lain. Normalisasi fitur kontinu adalah solusi untuk mengatasi kelemahan ini. Euclidian Distance dinyatakan dengan: $$ d_(x,y) =\\sqrt{ \\sum _ { i = 1 } ^ { n } \\left( x _ { i } - y _ { i } \\right)^2} $$ Average Distance \u00b6 Berkenaan dengan kekurangan dari Jarak Euclidian Distance diatas, rata rata jarak adala versi modikfikasi dari jarak Euclidian untuk memperbaiki hasil. Untuk dua titik $ x,y $ dalam ruang dimensi $ n $, rata-rata jarak didefinisikan dengan: $$ d _ { a v e } = \\left ( \\frac { 1 } { n } \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } \\right) ^ { \\frac { 1 } { 2 } } $$ Weighted euclidean distance \u00b6 Jika berdasarkan tingkatan penting dari masing masing atribut ditentukan, maka Weighted Euclidean distance adalah modifikisasi lain dari jarak Euclidean distance yang dapat digunakan. Ukuran ini dirumuskan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$ dimana w i adalah bobot yang diberikan pada atribut ke i. Chord distance \u00b6 Chord distance adalah salah satu ukuran jarak modifikasi Euclidean distance untuk mengatasi kekurangan dari Euclidean distance. Ini dapat dipecahkan juga dengan menggunakan skala pengukuran yang baik. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi . Chord distance didefinisikan dengan: $$ d _ { \\text {chord} } = \\left ( 2 - 2 \\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } \\right) ^ { \\frac { 1 } { 2 } } $$ dimana $ { | x | _ { 2 } } $ adalah $ L^2-norm { | x | _ { 2 } } =\\sqrt { \\sum_{ i = 1 }^{ n }x_{i}^{2}} $ Mahalanobis distance \u00b6 Mahalanobis distance berdasarkan data berbeda dengan Euclidean dan Manhattan distances yang bebas antra data dengan data yang lain. Jarak Mahalanobis yang teratur dapat digunakan untuk mengekstraksi hyperellipsoidal clusters. Jarak Mahalanobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antara fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat Jarak mahalanobis. Mahalanobis distance dinyatakan dengan: $$ d _ { m a h } = \\sqrt { ( x - y ) S ^ { - 1 } ( x - y ) ^ { T } } $$ diman $ S $ adalah matrik covariance data. Cosine measure \u00b6 Ukuran Cosine similarity lebih banyak digunakan dalam similaritas dokumen dan dinyatakan dengan $$ Cosine(x,y)=\\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } $$ dimana $ | y | _ { 2 } $ adalah Euclidean norm dari vektor $ y=(y_{1} , y_{2} , \\dots , y_{n} ) $ di definisikan dengan $ |y|_{2}=\\sqrt{ y _ { 1 } ^ { 2 } + y _ { 2 } ^ { 2 } + \\ldots + y _ { n } ^ { 2 } } $ Pearson Correlation \u00b6 Pearson correlation banyak digunakan dalam data expresi gen. Ukuran similaritas ini menghitung similaritas antara duan bentuk pola expresi gen. Pearson correlation didefinisikan dengan: $$ Pearson ( x , y ) = \\frac { \\sum _ { i = 1 } ^ { n } ( x _ { i } - \\mu _ { x } ) ( y _ { i } - \\mu _ { y } ) } { \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } } $$ The Pearson correlation kelemahannya adalah sensitif terhadap outlier Mengukur Jarak Tipe Binary \u00b6 Atribut biner merupakan atribut yang hanya memiliki dua status: 0 dan 1. Contoh dari atribut biner adalah hasil tes urine yang akan mendapatkan hasil positiv dan negatif, dimana hasil dari positif representasikan sebagai 1 dan sebaliknya hasil negative representasikan sebagai 0. Dalam menghitung jarak tipe biner tidak diperkenankan menyamakan dengan menghitung jarak tipe numerik ada metode khusus untuk menghitungnya. Jadi, bagaimana kita bisa menghitung ketidaksamaan antara dua atribut biner? \u201dSatu pendekatan melibatkan penghitungan matriks ketidaksamaan dari data biner yang diberikan. Jika semua atribut biner dianggap memiliki bobot yang sama, kita memiliki tabel kontingensi 2\u00d72 di mana q adalah jumlah atribut yang sama dengan 1 untuk kedua objek i dan j, r adalah jumlah atribut yang sama dengan 1 untuk objek i tetapi 0 untuk objek j, s adalah jumlah atribut yang sama dengan 0 untuk objek i tetapi 1 untuk objek j, dan t adalah jumlah atribut yang sama dengan 0 untuk kedua objek i dan j. Jumlah total atribut adalah p, di mana p=q+r+s+t Ingatlah bahwa untuk atribut biner simetris, masing-masing nilai bobot yang sama .Dissimilarity yang didasarkan pada atribut aymmetric binary disebut symmetric binary dissimilarity. Jika objek i dan j dinyatakan sebagai atribut biner simetris, maka dissimilarity antari dan j adalah : $$ d ( i , j ) = \\frac { r + s } { q + r + s + t } $$ Untuk atribut biner asimetris, kedua kondisi tersebut tidak sama pentingnya, seperti hasil positif (1) dan negatif (0) dari tes penyakit. Diberikan dua atribut biner asimetris, pencocokan keduanya 1 (kecocokan positif) kemudian dianggap lebih signifikan daripada kecocokan negatif. Ketidaksamaan berdasarkan atribut-atribut ini disebut asimetris biner dissimilarity, di mana jumlah kecocokan negatif, t, dianggap tidak penting dan dengan demikian diabaikan. Berikut perhitungannya: $$ d ( i , j ) = \\frac { r + s } { q + r + s } $$ Kita dapat mengukur perbedaan antara dua atribut biner berdasarkan pada disimilarity. Misalnya, biner asimetris kesamaan antara objek i dan j dapat dihitung dengan $$ \\operatorname { sim } ( i , j ) = \\frac { q } { q + r + s } = 1 - d ( i , j ) $$ Persamaan similarity ini disebut dengan Jaccard coefficient Mengukur Jarak Tipe Kategorical \u00b6 Sebuah data tipe kategorial bisa membawa dua atau lebih pernyataan. Misalnya, map_color sebuah atribut nominal yang mempunya 5 pernyataan yaitu: merah, kuning, hijau, merah jambu, dan biru. Status dapat dilambangkan dengan byletters, simbol, atau satu set bilangan bulat, seperti 1, 2, ..., M. Perhatikan bahwa bilangan bulat tersebut digunakan hanya untuk penanganan data dan tidak mewakili pemesanan khusus apa pun. Perbedaan antara dua objek i dan j bisa di hitung dengan menggunakan rasio ketidak cocokan : $$ d_(i,j) = {p - m \\over p} $$ dimana, $ m $ merupakan angka yang cocok (nomer yang cocok untuk $ i $ dan $ j $ ). Dan p merupakan banyak fitur yang di hitung sebagai tipe nominal. Mengukur Jarak Tipe Ordinal \u00b6 Nilai-nilai atribut ordinal memiliki urutan atau peringkat, namun besarnya antara nilai-nilai berturut-turut tidak diketahui. Contohnya tingkatan kecil, sedang, besar untuk atribut ukuran. Atribut ordinal juga dapat diperoleh dari diskritisasi atribut numerik dengan membuat rentang nilai ke dalam sejumlah kategori tertentu. Kategori-kategori ini disusun dalam peringkat. Yaitu, rentang atribut numerik dapat dipetakan ke atribut ordinal $ f $ yang memiliki $ M_f $ state. Misalnya, kisaran suhu atribut skala-skala (dalam Celcius) dapat diatur ke dalam status berikut: \u221230 hingga \u221210, \u221210 hingga 10, 10 hingga 0, masing-masing mewakili kategori suhu dingin, suhu sedang, dan suhu hangat. $ M $ adalah jumlah keadaan yang dapat dilakukan oleh atribut ordinalmemiliki. State ini menentukan peringkat $ 1,...,M_f$ Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan $ f $ adalah atribut-atribut dari atribut ordinal dari n objek. Menghitung disimilarity terhadap $ f $ fitur sebagai berikut: Nilai$ f $ untuk objek ke-i adalah $ x_if $, dan f memiliki $ M_f $ status urutan , mewakili peringkat $ 1,..,Mf $ Ganti setiap $ x_if $ dengan peringkatnya, $ r_if \u2208 {1...M_f} $ Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat $ r_if $ dengan : $$ z_if = {r_if - 1 \\over M_f -1} $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi $ z_if $ Mencari Jarak Data Tipe Campuran Menggunakan Python \u00b6 Alat dan Bahan \u00b6 Pada kasus kali ini saya telah menyediakan data tipe campuran yang disimpan dalam bentuk .csv yang dapat di unduh disini . untuk mempermudah dalam penyelesaian kasus ini, perlu di siapkan library dari python untuk mempermudah dalam pengerjaan. Library ini dapat di unduh secara gratis dari internet. Berikut merupakan library yang harus di persiapkan: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika. Pertama \u00b6 Langkah pertama yang harus dilakukan adalah memasukkan library yang telah diunduh sebelumnya. import pandas as pd import math as mt from sklearn.preprocessing import LabelEncoder Kedua \u00b6 Selanjutnya kita dapat membaca file csv tersebut. data = pd . read_csv ( 'data-mhs.csv' , sep = ';' ) df = pd . DataFrame ( data ) df . style . hide_index () Maka akan tampil sebagai berikut: Nama Jenis Kelamin IPK Penghasilan Orangtua Alamat Prestasi Ali L 3.4 3000000 Sumenep Internasional Ani P 3.2 5000000 Surabaya Regional Abi L 3.3 4000000 Bangkalan Nasional Ketiga \u00b6 Langkah ini, kita menerapkan dari formula menghitung jarak diatas dalam bentuk fungsi pada python. Fungsi berikut digunakan untuk melakukan normalisasi pada data numerikal. def Zscore ( x , mean , std ): top = x - mean if top == 0 : return top else : return round ( top / std , 2 ) def normalisasi ( num , col_x ): return Zscore ( num , pd . Series ( data [ col_x ] . values ) . mean (), pd . Series ( data [ col_x ] . values ) . std ()) Fungsi berikut merupakan penerapan dari rumus Euclidian Distance untuk menghitung jarak tipe numerikal. #menghitung jarak tipe numerikal def euclidianDistance ( x , y ): dis = 0 for i in range ( len ( x )): dis += ( x [ i ] - y [ i ]) ** 2 return round ( mt . sqrt ( dis ), 2 ) Fungsi berikut untuk menghitung jarak pada data tipe binary symetris. #Menghitung jarak tipe binary def distanceSimetris ( x , y ): q = r = s = t = 0 for i in range ( len ( x )): if x [ i ] == 1 and y [ i ] == 1 : q += 1 elif x [ i ] == 1 and y [ i ] == 0 : r += 1 elif x [ i ] == 0 and y [ i ] == 1 : s += 1 elif x [ i ] == 0 and y [ i ] == 0 : t += 1 return (( r + s ) / ( q + r + s + t )) Fungsi berikut untuk menghitung jarak tipe kategorikal. #Menghitung Jarak tipe categorikal def distanceNom ( x , y ): p = len ( x ) or len ( y ) m = 0 for i in range ( len ( x )): if x [ i ][ 0 ] == y [ i ][ 0 ]: m += 1 return ( p - m ) / p \u200b Fungsi berikut untuk melakukan normalisasi pada data tipe ordinal: #inisialisasi x = { 'Internasional' : 3 , 'Nasional' : 2 , 'Regional' : 1 } #Menghitung Jarak tipe ordinal def normalizedOrd ( y ): i_max = 0 for i in x : if x [ i ] > i_max : i_max = x [ i ] if y [ 0 ] == i : i_val = x [ i ] return ( i_val - 1 ) / ( i_max - 1 ) Keempat \u00b6 Pada langkah ini kita membuat inisialisasi dictionary dissimilarity matrix: d_x = { 0 : [ '' , 'Ali' , 'Ani' , 'Abi' ], 1 : [ 'Ali' , 0 , '' , '' ], 2 : [ 'Ani' , '' , 0 , '' ], 3 : [ 'Abi' , '' , '' , 0 ] } Kelima \u00b6 Untuk mempermudah dalam menghitung jarak dari data tipe binary, alangkah lebih baiknya kita konversi nilai dari fitur tersebut dalam bentuk angka 0 / 1. Dalam proses konversi tersebut kita dapat menggunakan fungsi LabelEncode yang merupakan bawaan dari library sklearn . X = data . iloc [:,:] . values labelEncode_X = LabelEncoder () X [:, 1 ] = labelEncode_X . fit_transform ( X [:, 1 ]) Keenam \u00b6 Pada langkah ini kita akan menghitung jarak dari masing-masing tipe menggunakan fungsi yang telah dibuat sebelumnya. Menghitung Jarak Tipe Numerikal \u00b6 Berikut merupakan proses menghitung jarak dengan tipe numerikal. Pada proses berikut kita mengambil fitur-fitur numerik dari masing-masing objek, yaitu: ali, ani, dan abi. dari data numerik tersebut kemudian dilakukan normalisasi dan menghitungnya dengan mengunakan fungsi Euclidian Distance yang hasilnya di tampung pada dictionary dissimilarity matrix. #ambil data numerikal aliNum = df . iloc [ 0 , 2 : 4 ] . values aniNum = df . iloc [ 1 , 2 : 4 ] . values abiNum = df . iloc [ 2 , 2 : 4 ] . values #normalisasi data numerikal aliNum = [ normalisasi ( aliNum [ 0 ], data . columns [ 2 ]), normalisasi ( aliNum [ 1 ], data . columns [ 3 ])] aniNum = [ normalisasi ( aniNum [ 0 ], data . columns [ 2 ]), normalisasi ( aniNum [ 1 ], data . columns [ 3 ])] abiNum = [ normalisasi ( abiNum [ 0 ], data . columns [ 2 ]), normalisasi ( abiNum [ 1 ], data . columns [ 3 ])] d_x [ 1 ][ 2 ] = euclidianDistance ( aniNum , aliNum ) d_x [ 1 ][ 3 ] = euclidianDistance ( abiNum , aliNum ) d_x [ 2 ][ 3 ] = euclidianDistance ( abiNum , aniNum ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. Apabila nilai dari dissimilarity matrix mendekati 0, maka kedua objek tersebut semakin sama: 0 1 2 3 Ali Ani Abi Ali 0 Ani 2.83 0 Abi 1.41 1.41 0 Menghitung Jarak Tipe Kategorikal \u00b6 Pada proses berikut kita menghitung jarak dengan tipe kategorikal / nominal. Pada proses tersebut kita akan mengambil nilai dari fitur kategorikal dari masing-masing objek. Dalam kasus ini yang menjadi fitur kategorikal adalah Kabupaten. Selanjutnya dari masing-masing nilai yang telah di ambil akan dihitung mengunakan fungsi distanceNom(obj1,obj2) yang telah dibuat sebelumnya, yang hasilnya ditampung pada dictionary dissimilarity matrix. #ambil data kategorical aliKat = [ df . iloc [ 0 , 4 : 5 ] . values ] aniKat = [ df . iloc [ 1 , 4 : 5 ] . values ] abiKat = [ df . iloc [ 2 , 4 : 5 ] . values ] d_x [ 1 ][ 2 ] = distanceNom ( aniKat , aliKat ) d_x [ 1 ][ 3 ] = distanceNom ( abiKat , aliKat ) d_x [ 2 ][ 3 ] = distanceNom ( abiKat , aniKat ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. Pada dissimilarity matrix berikut, apabila nilainya berupa 0, maka kedua objek tersebut memiliki kesamaan dan juga sebaliknya, apabila nilainya berupa 1, kedua objek tersebut memiliki perbedaan. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 1 1 0 Menghitung Jarak Tipe Binary \u00b6 Berikut ini kita akan menghitung jarak dengan tipe binary. Pada proses berikut kita harus mengambil nilai dari masing-masing objek. Dalam kasus ini, yang menjadi fitur biner adalah Jenis Kelamin. Selanjutnya, dari nilai masing-masing objek dihitung jaraknya menggunakan menggunakan fungsi distanceSimetris(obj1, obj2) yang telah dibuat sebelumnya. Dari hasil perhitungan tersebut ditampung pada dictionary dissimilarity matrix. #ambil data binary aliBin = X [ 0 , 1 : 2 ] aniBin = X [ 1 , 1 : 2 ] abiBin = X [ 2 , 1 : 2 ] d_x [ 1 ][ 2 ] = distanceSimetris ( aniBin , aliBin ) d_x [ 1 ][ 3 ] = distanceSimetris ( abiBin , aliBin ) d_x [ 2 ][ 3 ] = distanceSimetris ( abiBin , aniBin ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 0 1 0 Menghitung Jarak Tipe Ordinal \u00b6 Berikut ini kita akan memghitung jarak tipe ordinal. Pada prosesnya, kita akan mengambil nilai dari masing-masing objek dari fitur Prestasi. Nilai dari masing-masing objek di normalisasi menggunakan fungsi normalizedOrd(ordObj) yang telah dibuat sebelumnya, dan dihitung jaraknya menggunakan fungsi euclidianDistance(obj1, obj2) yang hasilnya kemudian ditampung pada dictionary dissimilarity matrix. #ambil data ordinal aliOrd = [ df . iloc [ 0 , 5 : 6 ] . values ] aniOrd = [ df . iloc [ 1 , 5 : 6 ] . values ] abiOrd = [ df . iloc [ 2 , 5 : 6 ] . values ] d_x [ 1 ][ 2 ] = euclidianDistance ([ normalizedOrd ( aniOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 1 ][ 3 ] = euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 2 ][ 3 ] = euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aniOrd )]) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 0.5 0.5 0 Menghitung Jarak Tipe Campuran \u00b6 Pada proses berikut kita akan menghitung jarak dengan berbagai tipe. Untuk menghitungnya kita dapat menjumlah jarak dari masing-masing tipe. d_x [ 1 ][ 2 ] = euclidianDistance ( aniNum , aliNum ) + \\ distanceNom ( aniKat , aliKat ) + distanceSimetris ( aniBin , aliBin ) + \\ euclidianDistance ([ normalizedOrd ( aniOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 1 ][ 3 ] = euclidianDistance ( abiNum , aliNum ) + \\ distanceNom ( abiKat , aliKat ) + distanceSimetris ( abiBin , aliBin ) + \\ euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 2 ][ 3 ] = euclidianDistance ( abiNum , aniNum ) + \\ distanceNom ( abiKat , aniKat ) + distanceSimetris ( abiBin , aniBin ) + \\ euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aniOrd )]) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 5.83 0 Abi 2.91 3.91 0 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$'],['$','$']]} });","title":"Menghitung Jarak Data"},{"location":"Distance/#mengukur-jarak-data","text":"","title":"Mengukur Jarak Data"},{"location":"Distance/#mengukur-jarak-tipe-numerik","text":"Salah satu tantangan dalam era ini dengan datatabase yang memiliki banyak tipe data. Mengukur jarak adalah komponen utama dalam algoritma clustering berbasis jarak. Alogritma seperti Algoritma Partisioning misal K-Mean, K-medoidm dan fuzzy c-mean dan rough clustering bergantung pada jarak untuk melakukan pengelompokkan. Ada beberapa cara untuk menghitung similaritas atau jarak dari dari data tipe numerik, diantaranya:","title":"Mengukur Jarak Tipe Numerik"},{"location":"Distance/#minkowski-distance","text":"Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, yang menjadi kasus khusus dari Minkowski distance. Minkowski distance dinyatakan dengan: $$ d _ { \\operatorname { min } } = ( \\ sum _ { i = 1 } ^ { n } | x _ { i } - y _ { i } | ^ { m } ) ^ { \\frac { 1 } { m } } , m \\geq 1 $$ Diman $ m $ adalah bilangan riel positif dan $ x_i $ dan $ y_i $ adalah dua vektor dalam runang dimensi $ n $ Implementasi ukuran jarak Minkowski pada model clustering data atribut dilakukan normalisasi untuk menghindari dominasi dari atribut yang memiliki skala data besar.","title":"Minkowski Distance"},{"location":"Distance/#manhattan-distance","text":"Manhattan distance adalah kasus khsusu dari jarak Minkowski distance pada m = 1. Seperti Minkowski Distance, Manhattan distance sensitif terhadap outlier. BIla ukuran ini digunakan dalam algoritma clustering , bentuk cluster adalah hyper-rectangular. Ukuran ini didefinisikan dengan: $$ d _ { \\operatorname { man } } = \\sum _ { i = 1 } ^ { n } \\left| x _ { i } - y _ { i } \\right| $$","title":"Manhattan Distance"},{"location":"Distance/#euiclidian-distance","text":"Jarak yang paling terkenal yang digunakan untuk data numerik adalah jarak Euclidean. Ini adalah kasus khusus dari jarak Minkowski ketika m = 2. Jarak Euclidean berkinerja baik ketika digunakan untuk kumpulan data cluster kompak atau terisolasi . Meskipun jarak Euclidean sangat umum dalam pengelompokan, ia memiliki kelemahan: jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkin memiliki jarak yang lebih kecil daripada pasangan vektor data lainnya yang mengandung nilai atribut yang sama. Masalah lain dengan jarak Euclidean sebagai fitur skala terbesar akan mendominasi yang lain. Normalisasi fitur kontinu adalah solusi untuk mengatasi kelemahan ini. Euclidian Distance dinyatakan dengan: $$ d_(x,y) =\\sqrt{ \\sum _ { i = 1 } ^ { n } \\left( x _ { i } - y _ { i } \\right)^2} $$","title":"Euiclidian Distance"},{"location":"Distance/#average-distance","text":"Berkenaan dengan kekurangan dari Jarak Euclidian Distance diatas, rata rata jarak adala versi modikfikasi dari jarak Euclidian untuk memperbaiki hasil. Untuk dua titik $ x,y $ dalam ruang dimensi $ n $, rata-rata jarak didefinisikan dengan: $$ d _ { a v e } = \\left ( \\frac { 1 } { n } \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } \\right) ^ { \\frac { 1 } { 2 } } $$","title":"Average Distance"},{"location":"Distance/#weighted-euclidean-distance","text":"Jika berdasarkan tingkatan penting dari masing masing atribut ditentukan, maka Weighted Euclidean distance adalah modifikisasi lain dari jarak Euclidean distance yang dapat digunakan. Ukuran ini dirumuskan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$ dimana w i adalah bobot yang diberikan pada atribut ke i.","title":"Weighted euclidean distance"},{"location":"Distance/#chord-distance","text":"Chord distance adalah salah satu ukuran jarak modifikasi Euclidean distance untuk mengatasi kekurangan dari Euclidean distance. Ini dapat dipecahkan juga dengan menggunakan skala pengukuran yang baik. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi . Chord distance didefinisikan dengan: $$ d _ { \\text {chord} } = \\left ( 2 - 2 \\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } \\right) ^ { \\frac { 1 } { 2 } } $$ dimana $ { | x | _ { 2 } } $ adalah $ L^2-norm { | x | _ { 2 } } =\\sqrt { \\sum_{ i = 1 }^{ n }x_{i}^{2}} $","title":"Chord distance"},{"location":"Distance/#mahalanobis-distance","text":"Mahalanobis distance berdasarkan data berbeda dengan Euclidean dan Manhattan distances yang bebas antra data dengan data yang lain. Jarak Mahalanobis yang teratur dapat digunakan untuk mengekstraksi hyperellipsoidal clusters. Jarak Mahalanobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antara fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat Jarak mahalanobis. Mahalanobis distance dinyatakan dengan: $$ d _ { m a h } = \\sqrt { ( x - y ) S ^ { - 1 } ( x - y ) ^ { T } } $$ diman $ S $ adalah matrik covariance data.","title":"Mahalanobis distance"},{"location":"Distance/#cosine-measure","text":"Ukuran Cosine similarity lebih banyak digunakan dalam similaritas dokumen dan dinyatakan dengan $$ Cosine(x,y)=\\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } $$ dimana $ | y | _ { 2 } $ adalah Euclidean norm dari vektor $ y=(y_{1} , y_{2} , \\dots , y_{n} ) $ di definisikan dengan $ |y|_{2}=\\sqrt{ y _ { 1 } ^ { 2 } + y _ { 2 } ^ { 2 } + \\ldots + y _ { n } ^ { 2 } } $","title":"Cosine measure"},{"location":"Distance/#pearson-correlation","text":"Pearson correlation banyak digunakan dalam data expresi gen. Ukuran similaritas ini menghitung similaritas antara duan bentuk pola expresi gen. Pearson correlation didefinisikan dengan: $$ Pearson ( x , y ) = \\frac { \\sum _ { i = 1 } ^ { n } ( x _ { i } - \\mu _ { x } ) ( y _ { i } - \\mu _ { y } ) } { \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } } $$ The Pearson correlation kelemahannya adalah sensitif terhadap outlier","title":"Pearson Correlation"},{"location":"Distance/#mengukur-jarak-tipe-binary","text":"Atribut biner merupakan atribut yang hanya memiliki dua status: 0 dan 1. Contoh dari atribut biner adalah hasil tes urine yang akan mendapatkan hasil positiv dan negatif, dimana hasil dari positif representasikan sebagai 1 dan sebaliknya hasil negative representasikan sebagai 0. Dalam menghitung jarak tipe biner tidak diperkenankan menyamakan dengan menghitung jarak tipe numerik ada metode khusus untuk menghitungnya. Jadi, bagaimana kita bisa menghitung ketidaksamaan antara dua atribut biner? \u201dSatu pendekatan melibatkan penghitungan matriks ketidaksamaan dari data biner yang diberikan. Jika semua atribut biner dianggap memiliki bobot yang sama, kita memiliki tabel kontingensi 2\u00d72 di mana q adalah jumlah atribut yang sama dengan 1 untuk kedua objek i dan j, r adalah jumlah atribut yang sama dengan 1 untuk objek i tetapi 0 untuk objek j, s adalah jumlah atribut yang sama dengan 0 untuk objek i tetapi 1 untuk objek j, dan t adalah jumlah atribut yang sama dengan 0 untuk kedua objek i dan j. Jumlah total atribut adalah p, di mana p=q+r+s+t Ingatlah bahwa untuk atribut biner simetris, masing-masing nilai bobot yang sama .Dissimilarity yang didasarkan pada atribut aymmetric binary disebut symmetric binary dissimilarity. Jika objek i dan j dinyatakan sebagai atribut biner simetris, maka dissimilarity antari dan j adalah : $$ d ( i , j ) = \\frac { r + s } { q + r + s + t } $$ Untuk atribut biner asimetris, kedua kondisi tersebut tidak sama pentingnya, seperti hasil positif (1) dan negatif (0) dari tes penyakit. Diberikan dua atribut biner asimetris, pencocokan keduanya 1 (kecocokan positif) kemudian dianggap lebih signifikan daripada kecocokan negatif. Ketidaksamaan berdasarkan atribut-atribut ini disebut asimetris biner dissimilarity, di mana jumlah kecocokan negatif, t, dianggap tidak penting dan dengan demikian diabaikan. Berikut perhitungannya: $$ d ( i , j ) = \\frac { r + s } { q + r + s } $$ Kita dapat mengukur perbedaan antara dua atribut biner berdasarkan pada disimilarity. Misalnya, biner asimetris kesamaan antara objek i dan j dapat dihitung dengan $$ \\operatorname { sim } ( i , j ) = \\frac { q } { q + r + s } = 1 - d ( i , j ) $$ Persamaan similarity ini disebut dengan Jaccard coefficient","title":"Mengukur Jarak Tipe Binary"},{"location":"Distance/#mengukur-jarak-tipe-kategorical","text":"Sebuah data tipe kategorial bisa membawa dua atau lebih pernyataan. Misalnya, map_color sebuah atribut nominal yang mempunya 5 pernyataan yaitu: merah, kuning, hijau, merah jambu, dan biru. Status dapat dilambangkan dengan byletters, simbol, atau satu set bilangan bulat, seperti 1, 2, ..., M. Perhatikan bahwa bilangan bulat tersebut digunakan hanya untuk penanganan data dan tidak mewakili pemesanan khusus apa pun. Perbedaan antara dua objek i dan j bisa di hitung dengan menggunakan rasio ketidak cocokan : $$ d_(i,j) = {p - m \\over p} $$ dimana, $ m $ merupakan angka yang cocok (nomer yang cocok untuk $ i $ dan $ j $ ). Dan p merupakan banyak fitur yang di hitung sebagai tipe nominal.","title":"Mengukur Jarak Tipe Kategorical"},{"location":"Distance/#mengukur-jarak-tipe-ordinal","text":"Nilai-nilai atribut ordinal memiliki urutan atau peringkat, namun besarnya antara nilai-nilai berturut-turut tidak diketahui. Contohnya tingkatan kecil, sedang, besar untuk atribut ukuran. Atribut ordinal juga dapat diperoleh dari diskritisasi atribut numerik dengan membuat rentang nilai ke dalam sejumlah kategori tertentu. Kategori-kategori ini disusun dalam peringkat. Yaitu, rentang atribut numerik dapat dipetakan ke atribut ordinal $ f $ yang memiliki $ M_f $ state. Misalnya, kisaran suhu atribut skala-skala (dalam Celcius) dapat diatur ke dalam status berikut: \u221230 hingga \u221210, \u221210 hingga 10, 10 hingga 0, masing-masing mewakili kategori suhu dingin, suhu sedang, dan suhu hangat. $ M $ adalah jumlah keadaan yang dapat dilakukan oleh atribut ordinalmemiliki. State ini menentukan peringkat $ 1,...,M_f$ Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan $ f $ adalah atribut-atribut dari atribut ordinal dari n objek. Menghitung disimilarity terhadap $ f $ fitur sebagai berikut: Nilai$ f $ untuk objek ke-i adalah $ x_if $, dan f memiliki $ M_f $ status urutan , mewakili peringkat $ 1,..,Mf $ Ganti setiap $ x_if $ dengan peringkatnya, $ r_if \u2208 {1...M_f} $ Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat $ r_if $ dengan : $$ z_if = {r_if - 1 \\over M_f -1} $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi $ z_if $","title":"Mengukur Jarak Tipe Ordinal"},{"location":"Distance/#mencari-jarak-data-tipe-campuran-menggunakan-python","text":"","title":"Mencari Jarak Data Tipe Campuran Menggunakan Python"},{"location":"Distance/#alat-dan-bahan","text":"Pada kasus kali ini saya telah menyediakan data tipe campuran yang disimpan dalam bentuk .csv yang dapat di unduh disini . untuk mempermudah dalam penyelesaian kasus ini, perlu di siapkan library dari python untuk mempermudah dalam pengerjaan. Library ini dapat di unduh secara gratis dari internet. Berikut merupakan library yang harus di persiapkan: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika.","title":"Alat dan Bahan"},{"location":"Distance/#pertama","text":"Langkah pertama yang harus dilakukan adalah memasukkan library yang telah diunduh sebelumnya. import pandas as pd import math as mt from sklearn.preprocessing import LabelEncoder","title":"Pertama"},{"location":"Distance/#kedua","text":"Selanjutnya kita dapat membaca file csv tersebut. data = pd . read_csv ( 'data-mhs.csv' , sep = ';' ) df = pd . DataFrame ( data ) df . style . hide_index () Maka akan tampil sebagai berikut: Nama Jenis Kelamin IPK Penghasilan Orangtua Alamat Prestasi Ali L 3.4 3000000 Sumenep Internasional Ani P 3.2 5000000 Surabaya Regional Abi L 3.3 4000000 Bangkalan Nasional","title":"Kedua"},{"location":"Distance/#ketiga","text":"Langkah ini, kita menerapkan dari formula menghitung jarak diatas dalam bentuk fungsi pada python. Fungsi berikut digunakan untuk melakukan normalisasi pada data numerikal. def Zscore ( x , mean , std ): top = x - mean if top == 0 : return top else : return round ( top / std , 2 ) def normalisasi ( num , col_x ): return Zscore ( num , pd . Series ( data [ col_x ] . values ) . mean (), pd . Series ( data [ col_x ] . values ) . std ()) Fungsi berikut merupakan penerapan dari rumus Euclidian Distance untuk menghitung jarak tipe numerikal. #menghitung jarak tipe numerikal def euclidianDistance ( x , y ): dis = 0 for i in range ( len ( x )): dis += ( x [ i ] - y [ i ]) ** 2 return round ( mt . sqrt ( dis ), 2 ) Fungsi berikut untuk menghitung jarak pada data tipe binary symetris. #Menghitung jarak tipe binary def distanceSimetris ( x , y ): q = r = s = t = 0 for i in range ( len ( x )): if x [ i ] == 1 and y [ i ] == 1 : q += 1 elif x [ i ] == 1 and y [ i ] == 0 : r += 1 elif x [ i ] == 0 and y [ i ] == 1 : s += 1 elif x [ i ] == 0 and y [ i ] == 0 : t += 1 return (( r + s ) / ( q + r + s + t )) Fungsi berikut untuk menghitung jarak tipe kategorikal. #Menghitung Jarak tipe categorikal def distanceNom ( x , y ): p = len ( x ) or len ( y ) m = 0 for i in range ( len ( x )): if x [ i ][ 0 ] == y [ i ][ 0 ]: m += 1 return ( p - m ) / p \u200b Fungsi berikut untuk melakukan normalisasi pada data tipe ordinal: #inisialisasi x = { 'Internasional' : 3 , 'Nasional' : 2 , 'Regional' : 1 } #Menghitung Jarak tipe ordinal def normalizedOrd ( y ): i_max = 0 for i in x : if x [ i ] > i_max : i_max = x [ i ] if y [ 0 ] == i : i_val = x [ i ] return ( i_val - 1 ) / ( i_max - 1 )","title":"Ketiga"},{"location":"Distance/#keempat","text":"Pada langkah ini kita membuat inisialisasi dictionary dissimilarity matrix: d_x = { 0 : [ '' , 'Ali' , 'Ani' , 'Abi' ], 1 : [ 'Ali' , 0 , '' , '' ], 2 : [ 'Ani' , '' , 0 , '' ], 3 : [ 'Abi' , '' , '' , 0 ] }","title":"Keempat"},{"location":"Distance/#kelima","text":"Untuk mempermudah dalam menghitung jarak dari data tipe binary, alangkah lebih baiknya kita konversi nilai dari fitur tersebut dalam bentuk angka 0 / 1. Dalam proses konversi tersebut kita dapat menggunakan fungsi LabelEncode yang merupakan bawaan dari library sklearn . X = data . iloc [:,:] . values labelEncode_X = LabelEncoder () X [:, 1 ] = labelEncode_X . fit_transform ( X [:, 1 ])","title":"Kelima"},{"location":"Distance/#keenam","text":"Pada langkah ini kita akan menghitung jarak dari masing-masing tipe menggunakan fungsi yang telah dibuat sebelumnya.","title":"Keenam"},{"location":"Distance/#menghitung-jarak-tipe-numerikal","text":"Berikut merupakan proses menghitung jarak dengan tipe numerikal. Pada proses berikut kita mengambil fitur-fitur numerik dari masing-masing objek, yaitu: ali, ani, dan abi. dari data numerik tersebut kemudian dilakukan normalisasi dan menghitungnya dengan mengunakan fungsi Euclidian Distance yang hasilnya di tampung pada dictionary dissimilarity matrix. #ambil data numerikal aliNum = df . iloc [ 0 , 2 : 4 ] . values aniNum = df . iloc [ 1 , 2 : 4 ] . values abiNum = df . iloc [ 2 , 2 : 4 ] . values #normalisasi data numerikal aliNum = [ normalisasi ( aliNum [ 0 ], data . columns [ 2 ]), normalisasi ( aliNum [ 1 ], data . columns [ 3 ])] aniNum = [ normalisasi ( aniNum [ 0 ], data . columns [ 2 ]), normalisasi ( aniNum [ 1 ], data . columns [ 3 ])] abiNum = [ normalisasi ( abiNum [ 0 ], data . columns [ 2 ]), normalisasi ( abiNum [ 1 ], data . columns [ 3 ])] d_x [ 1 ][ 2 ] = euclidianDistance ( aniNum , aliNum ) d_x [ 1 ][ 3 ] = euclidianDistance ( abiNum , aliNum ) d_x [ 2 ][ 3 ] = euclidianDistance ( abiNum , aniNum ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. Apabila nilai dari dissimilarity matrix mendekati 0, maka kedua objek tersebut semakin sama: 0 1 2 3 Ali Ani Abi Ali 0 Ani 2.83 0 Abi 1.41 1.41 0","title":"Menghitung Jarak Tipe Numerikal"},{"location":"Distance/#menghitung-jarak-tipe-kategorikal","text":"Pada proses berikut kita menghitung jarak dengan tipe kategorikal / nominal. Pada proses tersebut kita akan mengambil nilai dari fitur kategorikal dari masing-masing objek. Dalam kasus ini yang menjadi fitur kategorikal adalah Kabupaten. Selanjutnya dari masing-masing nilai yang telah di ambil akan dihitung mengunakan fungsi distanceNom(obj1,obj2) yang telah dibuat sebelumnya, yang hasilnya ditampung pada dictionary dissimilarity matrix. #ambil data kategorical aliKat = [ df . iloc [ 0 , 4 : 5 ] . values ] aniKat = [ df . iloc [ 1 , 4 : 5 ] . values ] abiKat = [ df . iloc [ 2 , 4 : 5 ] . values ] d_x [ 1 ][ 2 ] = distanceNom ( aniKat , aliKat ) d_x [ 1 ][ 3 ] = distanceNom ( abiKat , aliKat ) d_x [ 2 ][ 3 ] = distanceNom ( abiKat , aniKat ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. Pada dissimilarity matrix berikut, apabila nilainya berupa 0, maka kedua objek tersebut memiliki kesamaan dan juga sebaliknya, apabila nilainya berupa 1, kedua objek tersebut memiliki perbedaan. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 1 1 0","title":"Menghitung Jarak Tipe Kategorikal"},{"location":"Distance/#menghitung-jarak-tipe-binary","text":"Berikut ini kita akan menghitung jarak dengan tipe binary. Pada proses berikut kita harus mengambil nilai dari masing-masing objek. Dalam kasus ini, yang menjadi fitur biner adalah Jenis Kelamin. Selanjutnya, dari nilai masing-masing objek dihitung jaraknya menggunakan menggunakan fungsi distanceSimetris(obj1, obj2) yang telah dibuat sebelumnya. Dari hasil perhitungan tersebut ditampung pada dictionary dissimilarity matrix. #ambil data binary aliBin = X [ 0 , 1 : 2 ] aniBin = X [ 1 , 1 : 2 ] abiBin = X [ 2 , 1 : 2 ] d_x [ 1 ][ 2 ] = distanceSimetris ( aniBin , aliBin ) d_x [ 1 ][ 3 ] = distanceSimetris ( abiBin , aliBin ) d_x [ 2 ][ 3 ] = distanceSimetris ( abiBin , aniBin ) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 0 1 0","title":"Menghitung Jarak Tipe Binary"},{"location":"Distance/#menghitung-jarak-tipe-ordinal","text":"Berikut ini kita akan memghitung jarak tipe ordinal. Pada prosesnya, kita akan mengambil nilai dari masing-masing objek dari fitur Prestasi. Nilai dari masing-masing objek di normalisasi menggunakan fungsi normalizedOrd(ordObj) yang telah dibuat sebelumnya, dan dihitung jaraknya menggunakan fungsi euclidianDistance(obj1, obj2) yang hasilnya kemudian ditampung pada dictionary dissimilarity matrix. #ambil data ordinal aliOrd = [ df . iloc [ 0 , 5 : 6 ] . values ] aniOrd = [ df . iloc [ 1 , 5 : 6 ] . values ] abiOrd = [ df . iloc [ 2 , 5 : 6 ] . values ] d_x [ 1 ][ 2 ] = euclidianDistance ([ normalizedOrd ( aniOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 1 ][ 3 ] = euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 2 ][ 3 ] = euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aniOrd )]) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 1 0 Abi 0.5 0.5 0","title":"Menghitung Jarak Tipe Ordinal"},{"location":"Distance/#menghitung-jarak-tipe-campuran","text":"Pada proses berikut kita akan menghitung jarak dengan berbagai tipe. Untuk menghitungnya kita dapat menjumlah jarak dari masing-masing tipe. d_x [ 1 ][ 2 ] = euclidianDistance ( aniNum , aliNum ) + \\ distanceNom ( aniKat , aliKat ) + distanceSimetris ( aniBin , aliBin ) + \\ euclidianDistance ([ normalizedOrd ( aniOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 1 ][ 3 ] = euclidianDistance ( abiNum , aliNum ) + \\ distanceNom ( abiKat , aliKat ) + distanceSimetris ( abiBin , aliBin ) + \\ euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aliOrd )]) d_x [ 2 ][ 3 ] = euclidianDistance ( abiNum , aniNum ) + \\ distanceNom ( abiKat , aniKat ) + distanceSimetris ( abiBin , aniBin ) + \\ euclidianDistance ([ normalizedOrd ( abiOrd )],[ normalizedOrd ( aniOrd )]) d_x = pd . DataFrame ( d_x ) d_x . style . hide_index () Dari proses diatas, akan menampilkan jarak dalam bentuk dissimilarity matrix. 0 1 2 3 Ali Ani Abi Ali 0 Ani 5.83 0 Abi 2.91 3.91 0 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$'],['$','$']]} });","title":"Menghitung Jarak Tipe Campuran"},{"location":"Statistik Deskriptif/","text":"Statistik Dekriptif \u00b6 Pengertian \u00b6 Statistik Deskriptif adalah sebuah representasi keseluruhan himpunan data spesifik dengan memberikan ringkasan pendek tentang sampel dan ukuran data. Statistik deskriptif memberikan ringkasan sederhana tentang sempel dan pengamatan yang telah dilakukan. Ringkasan tersebut dapat berupa kuantitatif, yaitu: statistik yang tersaji dengan ringkas dan rapi yang dapat berupa table, diagram, ataupun grafik sehingga dapat memberikan informasi inti dari kumpulan data yang ada dengan mudah untuk dipahami. dari statistik deskriptif ini dapat memberikan informasi yang dapat berupa: ukuran pemusatan data, ukuran penyebaran data, juga kecenderungan suatu gugus data. Tipe Statistik Deskriptif \u00b6 Mean (rata-rata) \u00b6 Mean merupakan rata-rata dari semua angka. Mean didapat dari hasil penjumlahan dari keseluruhan angka yang dibagi dengan banyaknya angka itu sendiri. Jika kita memiliki N data, kita dapat menghitung mean itu sendiri dengan menggunakan rumus berikut: $$ \\bar x ={\\sum \\limits_{i=1}^{n} x_i \\over N} = {x_1 + x_2 + x_3 + ... + x_n \\over N} $$ Dimana: x bar = x rata-rata = nilai rata-rata sampel x = data ke n n = banyaknya data Median \u00b6 Median merupakan pusat data atau lebih sering dikatakan nilai tengah dari sebuah urutan data. Median disimbolkan dengan Me . nilai dari median akan sama dengan nilai Quartile 2 ( Q 2 ). Dalam mencari median, banyak( n ) dari data ganjil dan genap memiliki cara perhitungan yang berbeda. Untuk mencari median kita dapat menggunakan rumus sebagai berikut: $$ Me=Q_2 =\\left( \\begin{matrix} n+1 \\over 2 \\end{matrix} \\right), jika\\quad n\\quad ganjil $$ $$ Me=Q_2 =\\left( \\begin{matrix} {xn \\over 2 } {xn+1\\over 2} \\over 2 \\end{matrix} \\right), jika\\quad n\\quad genap $$ Dimana : M e = Median dari kelompok data n = banyak data Modus \u00b6 Modus adalah angka yang paling sering ditemukan dalam suatu himpunan angka. Modus didapat dengan mengumpulkan dan mengatur data untuk menghitung setiap frekuensi dari setiap hasil. Dan hasil dengan jumlah tertinggi merupakan modus dari himpunan angka tersebut. Untuk mencari modus dari sebuah himpunan angka dapat menggunakan rumus berikut: $$ M_o = Tb + p{b_1 \\over b_1 + b_2} $$ Dimana: Mo = modus dari kelompok data Tb = tepi bawah dari elemen modus b1 = selisih frekuensi antara elemen modus dengan elemet sebelumnya b2 = selisih frekuensi antara elemen modus dengan elemen sesudahnya p = panjang interval nilai b1 dan b2 \u2013> adalah mutlak (selalu positif) Varians \u00b6 Varian adalah ukuran penyebaran setiap nilai dalam suatu himpunan data dari rata-rata. Dalam proses mendapatkan varian terdapat langkah yaitu yang harus dilakukan, yaitu: dengan mengambil ukuran jarak dari setiap nilai dan mengurangi rata-rata dari setiap nilai dalam data, kemudian hasil dari ukuran jarak tersebut dikuadratkan dan membagi jumlah kuadrat dengan jumlah nilai dalam himpunan data. Untuk menghitung varian terdapat formula yang dapat digunakan yaitu: $$ \\sigma^2 = {\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n} $$ Dimana : x i = titik data x bar = rata-rata dari semua titik data n = banyak dari dari anggota data Standar Deviasi \u00b6 Standar deviasi merupakan ukuran dispersi kumpulan data relatif terhadap rata-rata atau lebih simpelnya adalah akar kuadrat positif dari varian. Standar deviasi dihitung dengan mengakar kuadratkan nilai dari varians. jika titik data lebih dari rata-rata dalam kumpulan data maka, semakin tinggi standar deviasi. Untuk mencari standar deviasi kita dapat menggunakan formula berikut : $$ \\sigma^ = \\sqrt {{\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n}} $$ Skewness \u00b6 Skewness( kemiringan ) adalah ketidaksimetrisan pada suatu distribusi statistik dimana kurva tampak condong ke kiri atau ke kanan. Skewness digunakan untuk menentukan sejauhmana perbedaan suatu distribusi dengan distribusi normal. Dalam distribusi normal grafik muncul seperti kurva berbentuk lonceng. ketika suatu distribusi mengalami kemiringan ke sebelah kanan dan ekor di sisi kanan kurva lebih panjang dari ekor sisi kiri kurva maka situasi ini dikatakan kemiringan positif dan sebaliknya dikatakan kemiringan negative. Skewness bisa dihitung menggunakan rumus sebagai berikut: $$ Skewness = {\\sum \\limits{i=1}^n (x_i - \\bar x)^i \\over (n- 1) \\sigma^3} $$ Dimana : x i = titik data x bar = rata-rata dari distribusi n = jumlah titik dalam distribusi o = standar deviasi Quartile \u00b6 Quartile adalah irisan nilai dari hasil pembagian data menjadi empat bagian yang sama besar. Nilai-nilai dari quartile biasanya dilambangkan dengan Q 1 untuk quartile bawah. Q 1 ini mempunyai nilai 25% dari data. Q 2 atau biasa disebut quartile tengah yang mempunyai nilai sama seperti median yaitu 50% dari data. dan Q 3 sebagai quartile atas yang mempunyai nilai 75% dari data. Dalam mencari quatile kita dapat menggunakan rumus berikut ini: $$ Q_1 = (n + 1) {1\\over 4} $$ $$ Q_2 = (n + 1) {1\\over 2} $$ $$ Q_3 = (n + 1) {3\\over 4} $$ Dimana : Q = Nilai dari quartile n = banyak dari himpunan data Penerapan Statistik Deskriptif Menggunakan Python \u00b6 Alat dan Bahan \u00b6 Pada penerapan ini saya menggunakan 500 data random yang disimpan dalam bentuk .csv dan untuk mempermudah dalam penerapan tersebut, perlu disiapkan library python yang dapat didownload secara gratis. dalam kasus ini, library python yang digunakan adalah sebagai berikut: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika. Pertama \u00b6 pada langkah ini kita memasukkan library yang telah disiapkan sebelumya import pandas as pd from scipy import stats Kedua \u00b6 dan selanjutnya memuat data csv yang telah disiapkan df = pd . read_csv ( 'sample_data.csv' , sep = ';' ) Ketiga \u00b6 kemudian membuat data penyimpanan ( dictionary ) yang menampung nilai yang akan ditampilkan. selanjutnya mengambil data dari beberapa kolom pada csv dengan cara diiterasi serta, menghitungnya dengan berbagai metode yang telah disiapkan oleh pandas itu sendiri. kemudian hasil tersebut di disimpan pada penyimpanan tadi data = { \"Stats\" : [ 'Min' , 'Max' , 'Mean' , 'Standard Deviasi' , 'Variasi' , 'Skewnes' , 'Quartile 1' , 'Quartile 2' , 'Quartile 3' , 'Median' , 'Modus' ]} for i in df . columns : data [ i ] = [ df [ i ] . min (), df [ i ] . max (), df [ i ] . mean (), round ( df [ i ] . std (), 2 ), round ( df [ i ] . var (), 2 ), round ( df [ i ] . skew (), 2 ), df [ i ] . quantile ( 0.25 ), df [ i ] . quantile ( 0.5 ), df [ i ] . quantile ( 0.75 ), df [ i ] . median (), stats . mode ( df [ i ]) . mode [ 0 ]] Keempat \u00b6 terakhir adalah menvisualisasikan hasil tersebut dalam bentuk dataframe tes = pd . DataFrame ( data , columns = [ 'Stats' ] + [ x for x in df . columns ]) tes setelah jalankan, program tersebut akan menampilkan seperti berikut: Stats X1 X2 X3 X4 0 Min 30.000 30.000 30.000 30.000 1 Max 80.000 80.000 80.000 80.000 2 Mean 54.608 53.524 54.996 55.046 3 Standard Deviasi 14.720 15.110 14.470 14.560 4 Variasi 216.750 228.440 209.360 211.970 5 Skewnes 0.050 0.110 0.020 -0.020 6 Quartile 1 42.000 40.000 43.000 43.750 7 Quartile 2 54.000 52.000 55.000 54.000 8 Quartile 3 68.000 67.000 67.000 67.000 9 Median 54.000 52.000 55.000 54.000 10 Modus 77.000 38.000 38.000 54.000 Mencari Outlier \u00b6 Outlier merupakan suatu nilai dari pada sekumpulan data yang lain atau berbeda dibandingkan biasanya serta tidak menggambarkan karakteristik data tersebut. Sebuah outlier mungkin karena variabilitas dalam pengukuran atau mungkin menunjukkan kesalahan eksperimental. Standarisasi Data deteksi data dengan standarisasi pada prinsipnya mengubah nilai data menjadi bentuk Z, dengan menggunakan formula dari Z score, yaitu: $$ z = {(X - \\mu) \\over \\sigma} $$ Pada data csv tersebut, saya lakukan modifikasi dengan memberikan data sampah( noise ) yang pada sebagian kolom. dan dalam pencarian outlier ini saya menggunakan formula dari z score yang diterapkan pada python, yaitu sebagai berikut: def dekteksi_outlier ( df_in ): outliers = [] threshold = 3 for col_name in df_in : mean = df_in [ col_name ] . mean () std = df_in [ col_name ] . std () i = 1 for y in df_in [ col_name ]: z_score = ( y - mean ) / std if abs ( z_score ) > threshold : outliers . append ([ col_name , y , i ]) i += 1 return outliers for i in dekteksi_outlier ( df ): print ( 'Data sampah' , i [ 1 ], 'dikolom' , i [ 0 ], 'pada baris' , i [ 2 ]) dari fungsi diatas akan mengembalikan outlier dari data csv ditersebut. Data sampah ( 322 ) dikolom X1 pada baris 453 Data sampah ( 600 ) dikolom X1 pada baris 489 Data sampah ( 115 ) dikolom X2 pada baris 449 Data sampah ( 336 ) dikolom X3 pada baris 406 Data sampah ( 145 ) dikolom X4 pada baris 407 Data sampah ( 120 ) dikolom X4 pada baris 413 Source \u00b6 Seluruh file percobaan ada pada link berikut : disini Referensi \u00b6 http://blog.ub.ac.id/adiarsa/2012/03/14/mean-median-modus-dan-standar-deviasi/ http://statutorial.blogspot.com/2008/01/skewness-dan-kurtosis.html https://www.rumusstatistik.com/2013/07/varian-dan-standar-deviasi-simpangan.html https://www.rumusstatistik.com/2016/12/membuat-rumus-matematika-dengan-latex.html https://englishccit.wordpress.com/2012/03/27/pengertian-statistik-deskriptif/#more-1194 https://medium.com/datadriveninvestor/finding-outliers-in-dataset-using-python-efc3fce6ce32 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Statistik Deskriptif"},{"location":"Statistik Deskriptif/#statistik-dekriptif","text":"","title":"Statistik Dekriptif"},{"location":"Statistik Deskriptif/#pengertian","text":"Statistik Deskriptif adalah sebuah representasi keseluruhan himpunan data spesifik dengan memberikan ringkasan pendek tentang sampel dan ukuran data. Statistik deskriptif memberikan ringkasan sederhana tentang sempel dan pengamatan yang telah dilakukan. Ringkasan tersebut dapat berupa kuantitatif, yaitu: statistik yang tersaji dengan ringkas dan rapi yang dapat berupa table, diagram, ataupun grafik sehingga dapat memberikan informasi inti dari kumpulan data yang ada dengan mudah untuk dipahami. dari statistik deskriptif ini dapat memberikan informasi yang dapat berupa: ukuran pemusatan data, ukuran penyebaran data, juga kecenderungan suatu gugus data.","title":"Pengertian"},{"location":"Statistik Deskriptif/#tipe-statistik-deskriptif","text":"","title":"Tipe Statistik Deskriptif"},{"location":"Statistik Deskriptif/#mean-rata-rata","text":"Mean merupakan rata-rata dari semua angka. Mean didapat dari hasil penjumlahan dari keseluruhan angka yang dibagi dengan banyaknya angka itu sendiri. Jika kita memiliki N data, kita dapat menghitung mean itu sendiri dengan menggunakan rumus berikut: $$ \\bar x ={\\sum \\limits_{i=1}^{n} x_i \\over N} = {x_1 + x_2 + x_3 + ... + x_n \\over N} $$ Dimana: x bar = x rata-rata = nilai rata-rata sampel x = data ke n n = banyaknya data","title":"Mean (rata-rata)"},{"location":"Statistik Deskriptif/#median","text":"Median merupakan pusat data atau lebih sering dikatakan nilai tengah dari sebuah urutan data. Median disimbolkan dengan Me . nilai dari median akan sama dengan nilai Quartile 2 ( Q 2 ). Dalam mencari median, banyak( n ) dari data ganjil dan genap memiliki cara perhitungan yang berbeda. Untuk mencari median kita dapat menggunakan rumus sebagai berikut: $$ Me=Q_2 =\\left( \\begin{matrix} n+1 \\over 2 \\end{matrix} \\right), jika\\quad n\\quad ganjil $$ $$ Me=Q_2 =\\left( \\begin{matrix} {xn \\over 2 } {xn+1\\over 2} \\over 2 \\end{matrix} \\right), jika\\quad n\\quad genap $$ Dimana : M e = Median dari kelompok data n = banyak data","title":"Median"},{"location":"Statistik Deskriptif/#modus","text":"Modus adalah angka yang paling sering ditemukan dalam suatu himpunan angka. Modus didapat dengan mengumpulkan dan mengatur data untuk menghitung setiap frekuensi dari setiap hasil. Dan hasil dengan jumlah tertinggi merupakan modus dari himpunan angka tersebut. Untuk mencari modus dari sebuah himpunan angka dapat menggunakan rumus berikut: $$ M_o = Tb + p{b_1 \\over b_1 + b_2} $$ Dimana: Mo = modus dari kelompok data Tb = tepi bawah dari elemen modus b1 = selisih frekuensi antara elemen modus dengan elemet sebelumnya b2 = selisih frekuensi antara elemen modus dengan elemen sesudahnya p = panjang interval nilai b1 dan b2 \u2013> adalah mutlak (selalu positif)","title":"Modus"},{"location":"Statistik Deskriptif/#varians","text":"Varian adalah ukuran penyebaran setiap nilai dalam suatu himpunan data dari rata-rata. Dalam proses mendapatkan varian terdapat langkah yaitu yang harus dilakukan, yaitu: dengan mengambil ukuran jarak dari setiap nilai dan mengurangi rata-rata dari setiap nilai dalam data, kemudian hasil dari ukuran jarak tersebut dikuadratkan dan membagi jumlah kuadrat dengan jumlah nilai dalam himpunan data. Untuk menghitung varian terdapat formula yang dapat digunakan yaitu: $$ \\sigma^2 = {\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n} $$ Dimana : x i = titik data x bar = rata-rata dari semua titik data n = banyak dari dari anggota data","title":"Varians"},{"location":"Statistik Deskriptif/#standar-deviasi","text":"Standar deviasi merupakan ukuran dispersi kumpulan data relatif terhadap rata-rata atau lebih simpelnya adalah akar kuadrat positif dari varian. Standar deviasi dihitung dengan mengakar kuadratkan nilai dari varians. jika titik data lebih dari rata-rata dalam kumpulan data maka, semakin tinggi standar deviasi. Untuk mencari standar deviasi kita dapat menggunakan formula berikut : $$ \\sigma^ = \\sqrt {{\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n}} $$","title":"Standar Deviasi"},{"location":"Statistik Deskriptif/#skewness","text":"Skewness( kemiringan ) adalah ketidaksimetrisan pada suatu distribusi statistik dimana kurva tampak condong ke kiri atau ke kanan. Skewness digunakan untuk menentukan sejauhmana perbedaan suatu distribusi dengan distribusi normal. Dalam distribusi normal grafik muncul seperti kurva berbentuk lonceng. ketika suatu distribusi mengalami kemiringan ke sebelah kanan dan ekor di sisi kanan kurva lebih panjang dari ekor sisi kiri kurva maka situasi ini dikatakan kemiringan positif dan sebaliknya dikatakan kemiringan negative. Skewness bisa dihitung menggunakan rumus sebagai berikut: $$ Skewness = {\\sum \\limits{i=1}^n (x_i - \\bar x)^i \\over (n- 1) \\sigma^3} $$ Dimana : x i = titik data x bar = rata-rata dari distribusi n = jumlah titik dalam distribusi o = standar deviasi","title":"Skewness"},{"location":"Statistik Deskriptif/#quartile","text":"Quartile adalah irisan nilai dari hasil pembagian data menjadi empat bagian yang sama besar. Nilai-nilai dari quartile biasanya dilambangkan dengan Q 1 untuk quartile bawah. Q 1 ini mempunyai nilai 25% dari data. Q 2 atau biasa disebut quartile tengah yang mempunyai nilai sama seperti median yaitu 50% dari data. dan Q 3 sebagai quartile atas yang mempunyai nilai 75% dari data. Dalam mencari quatile kita dapat menggunakan rumus berikut ini: $$ Q_1 = (n + 1) {1\\over 4} $$ $$ Q_2 = (n + 1) {1\\over 2} $$ $$ Q_3 = (n + 1) {3\\over 4} $$ Dimana : Q = Nilai dari quartile n = banyak dari himpunan data","title":"Quartile"},{"location":"Statistik Deskriptif/#penerapan-statistik-deskriptif-menggunakan-python","text":"","title":"Penerapan Statistik Deskriptif Menggunakan Python"},{"location":"Statistik Deskriptif/#alat-dan-bahan","text":"Pada penerapan ini saya menggunakan 500 data random yang disimpan dalam bentuk .csv dan untuk mempermudah dalam penerapan tersebut, perlu disiapkan library python yang dapat didownload secara gratis. dalam kasus ini, library python yang digunakan adalah sebagai berikut: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika.","title":"Alat dan Bahan"},{"location":"Statistik Deskriptif/#pertama","text":"pada langkah ini kita memasukkan library yang telah disiapkan sebelumya import pandas as pd from scipy import stats","title":"Pertama"},{"location":"Statistik Deskriptif/#kedua","text":"dan selanjutnya memuat data csv yang telah disiapkan df = pd . read_csv ( 'sample_data.csv' , sep = ';' )","title":"Kedua"},{"location":"Statistik Deskriptif/#ketiga","text":"kemudian membuat data penyimpanan ( dictionary ) yang menampung nilai yang akan ditampilkan. selanjutnya mengambil data dari beberapa kolom pada csv dengan cara diiterasi serta, menghitungnya dengan berbagai metode yang telah disiapkan oleh pandas itu sendiri. kemudian hasil tersebut di disimpan pada penyimpanan tadi data = { \"Stats\" : [ 'Min' , 'Max' , 'Mean' , 'Standard Deviasi' , 'Variasi' , 'Skewnes' , 'Quartile 1' , 'Quartile 2' , 'Quartile 3' , 'Median' , 'Modus' ]} for i in df . columns : data [ i ] = [ df [ i ] . min (), df [ i ] . max (), df [ i ] . mean (), round ( df [ i ] . std (), 2 ), round ( df [ i ] . var (), 2 ), round ( df [ i ] . skew (), 2 ), df [ i ] . quantile ( 0.25 ), df [ i ] . quantile ( 0.5 ), df [ i ] . quantile ( 0.75 ), df [ i ] . median (), stats . mode ( df [ i ]) . mode [ 0 ]]","title":"Ketiga"},{"location":"Statistik Deskriptif/#keempat","text":"terakhir adalah menvisualisasikan hasil tersebut dalam bentuk dataframe tes = pd . DataFrame ( data , columns = [ 'Stats' ] + [ x for x in df . columns ]) tes setelah jalankan, program tersebut akan menampilkan seperti berikut: Stats X1 X2 X3 X4 0 Min 30.000 30.000 30.000 30.000 1 Max 80.000 80.000 80.000 80.000 2 Mean 54.608 53.524 54.996 55.046 3 Standard Deviasi 14.720 15.110 14.470 14.560 4 Variasi 216.750 228.440 209.360 211.970 5 Skewnes 0.050 0.110 0.020 -0.020 6 Quartile 1 42.000 40.000 43.000 43.750 7 Quartile 2 54.000 52.000 55.000 54.000 8 Quartile 3 68.000 67.000 67.000 67.000 9 Median 54.000 52.000 55.000 54.000 10 Modus 77.000 38.000 38.000 54.000","title":"Keempat"},{"location":"Statistik Deskriptif/#mencari-outlier","text":"Outlier merupakan suatu nilai dari pada sekumpulan data yang lain atau berbeda dibandingkan biasanya serta tidak menggambarkan karakteristik data tersebut. Sebuah outlier mungkin karena variabilitas dalam pengukuran atau mungkin menunjukkan kesalahan eksperimental. Standarisasi Data deteksi data dengan standarisasi pada prinsipnya mengubah nilai data menjadi bentuk Z, dengan menggunakan formula dari Z score, yaitu: $$ z = {(X - \\mu) \\over \\sigma} $$ Pada data csv tersebut, saya lakukan modifikasi dengan memberikan data sampah( noise ) yang pada sebagian kolom. dan dalam pencarian outlier ini saya menggunakan formula dari z score yang diterapkan pada python, yaitu sebagai berikut: def dekteksi_outlier ( df_in ): outliers = [] threshold = 3 for col_name in df_in : mean = df_in [ col_name ] . mean () std = df_in [ col_name ] . std () i = 1 for y in df_in [ col_name ]: z_score = ( y - mean ) / std if abs ( z_score ) > threshold : outliers . append ([ col_name , y , i ]) i += 1 return outliers for i in dekteksi_outlier ( df ): print ( 'Data sampah' , i [ 1 ], 'dikolom' , i [ 0 ], 'pada baris' , i [ 2 ]) dari fungsi diatas akan mengembalikan outlier dari data csv ditersebut. Data sampah ( 322 ) dikolom X1 pada baris 453 Data sampah ( 600 ) dikolom X1 pada baris 489 Data sampah ( 115 ) dikolom X2 pada baris 449 Data sampah ( 336 ) dikolom X3 pada baris 406 Data sampah ( 145 ) dikolom X4 pada baris 407 Data sampah ( 120 ) dikolom X4 pada baris 413","title":"Mencari Outlier"},{"location":"Statistik Deskriptif/#source","text":"Seluruh file percobaan ada pada link berikut : disini","title":"Source"},{"location":"Statistik Deskriptif/#referensi","text":"http://blog.ub.ac.id/adiarsa/2012/03/14/mean-median-modus-dan-standar-deviasi/ http://statutorial.blogspot.com/2008/01/skewness-dan-kurtosis.html https://www.rumusstatistik.com/2013/07/varian-dan-standar-deviasi-simpangan.html https://www.rumusstatistik.com/2016/12/membuat-rumus-matematika-dengan-latex.html https://englishccit.wordpress.com/2012/03/27/pengertian-statistik-deskriptif/#more-1194 https://medium.com/datadriveninvestor/finding-outliers-in-dataset-using-python-efc3fce6ce32 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Referensi"},{"location":"missing knn/","text":"Missing Values \u00b6 Missing Values (nilai yang hilang) adalah kejadian umum, dimana nilai yang hilang dapat menandakan sejumlah hal berbeda dalam data. Dan mungkin data tidak tersedia atau tidak berlaku. Missing value biasanya disebabkan oleh orang yang memasukkan data dan tidak tahu nilai yang benar, atau tidak mengisinya. Metode penambangan data bervariasi dalam cara mereka memperlakukan nilai yang hilang. Biasanya, mereka mengabaikan nilai yang hilang, atau mengecualikan catatan yang berisi nilai yang hilang, atau mengganti nilai yang hilang dengan nilai tengah, atau menyimpulkan nilai yang hilang dari nilai yang ada. Algoritma K-NN (k-Nearest Neighbors) \u00b6 Algoritma K-Nearest Naighbors adalah suatu algoritma klasifikasi sederhana dimana hasil dari instance yang baru diklasifikasikan berdasarkan mayoritas dari kategori k-tetangga terdekat. Algoritma ini memiliki tujuan untuk mengklasifikasi objek baru berdasarkan atribut dan sample-sample data training. langkah penyelesaian yang dilakukan oleh algoritma tersebut adalah: Kita harus menentukan jumlah tetangga terdekat yang nantinya akan kita hitung. Misalnya : kita menentukan 2 tetangga terdekat (k=2). Hitung jarak objek yang dipilih dengan seluruh tetangga yang ada. kemudian urutkan berdasarkan jarak yang diperoleh dari yang terkecil hingga ke terbesar. Ambil 2 tetangga yang paling dekat atau nilai jarak yang terkecil, dan ambil rata-ratanya. Mengatasi Missing Value Menggunakan Algoritma K-NN pada Python \u00b6 Alat dan Bahan \u00b6 Pada kasus kali ini, saya menggunakan dataset dari internet, yang bisa diunduh disini . Pada dataset tersebut terdapat 1 fitur bertipe binary dan 5 fitur bertipe numerikal. Pada fitur age dataset telah saya modif dengan mengubah dalam bentuk .csv dan memberikan missing value pada baris ke-257. Untuk mempermudah dalam penyelesaian kasus ini, perlu di siapkan library python untuk mempermudah dalam pengerjaan. Library ini dapat di unduh secara gratis dari internet. Berikut merupakan library yang harus di persiapkan: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika. Pertama \u00b6 Langkah pertama yang harus dilakukan adalah memasukkan library yang telah diunduh sebelumnya. import pandas as pd import math as mt from sklearn.preprocessing import LabelEncoder Kedua \u00b6 Selanjutnya kita mengambil file csv tersebut. data = pd . read_csv ( 'Wong.csv' , delimiter = ';' , decimal = ',' ) df = pd . DataFrame ( data ) df . style . highlight_null ( null_color = 'red' ) . hide_index () Maka akan tampil sebagai barikut: no id days duration sex age piq viq 1 3358 30 4 Male 20.6708 87 89 2 3535 16 17 Male 55.2882 95 77 3 3547 40 1 Male 55.9151 95 116 4 3592 13 10 Male 61.6646 59 73 5 3728 19 6 Male 30.1273 67 73 6 3790 13 3 Male 57.0623 76 69 7 3807 37 5 Male 24.6762 74 77 8 3808 31 7 Male 28.2683 91 110 9 4253 40 3 Male 22.6037 115 110 10 4356 31 7 Male 21.399 86 83 11 4384 35 8 Male 36.3806 76 90 12 4542 22 11 Female 21.9576 71 89 13 4705 18 1 Female 21.6838 127 109 14 4744 15 25 Male 57.566 82 85 15 4802 36 0 Male 62.475 88 97 16 4941 46 4 Female 19.0144 69 88 17 4983 33 5 Male 38.3929 102 117 18 5129 26 1 Male 25.0459 77 89 19 5154 35 5 Male 22.1903 82 95 20 5162 33 1 Male 25.0185 118 101 21 5174 38 4 Female 37.2704 87 99 22 5208 31 8 Female 21.3771 97 90 23 5253 29 1 Male 33.1335 104 105 24 5298 30 3 Male 22.9569 87 86 25 5640 34 7 Male 25.9986 93 113 26 5668 27 7 Male 40.9227 72 79 27 5680 17 1 Male 27.7563 84 90 28 5699 26 1 Female 34.2231 95 108 29 5713 36 8 Male 16.2683 89 97 30 5736 18 9 Male 16.1478 89 86 31 5754 36 1 Male 16.3368 87 86 32 5776 26 8 Male 17.128 71 88 33 6122 29 1 Male 56.2108 95 103 34 6163 21 1 Male 19.3593 112 106 35 6179 22 2 Male 38.0123 89 95 36 6671 30 7 Female 27.8056 71 82 37 6859 27 1 Male 34.2122 74 79 38 6870 22 0 Male 42.4832 84 95 39 6914 43 0 Male 61.5222 85 90 40 6937 18 0 Female 21.191 94 81 41 6977 30 1 Male 36.2108 97 94 42 7120 39 0 Male 69.7057 84 86 43 7309 31 0 Female 50.6667 85 95 44 7321 23 0 Male 26.0041 84 83 45 7548 31 0 Male 24.3669 108 106 46 2364 41 14 Male 25.8097 84 94 47 2600 3333 9 Male 43.9398 86 80 48 2761 40 3 Female 24.3696 98 112 49 3237 65 9 Male 49.8508 67 67 50 3277 51 1 Male 37.4702 104 96 51 3346 44 18 Female 57.2758 79 85 52 3359 59 9 Female 56.8953 84 91 53 3373 39 28 Female 26.308 87 91 54 3544 32 14 Male 54.5298 81 98 55 3655 57 5 Female 21.9055 90 103 56 3762 48 6 Male 20.3559 85 93 57 3919 58 1 Male 30.3655 99 95 58 4094 50 2 Male 19.7262 79 93 59 4133 34 14 Male 20 70 88 60 4183 42 3 Male 26.2341 98 116 61 4189 69 4 Female 29.462 75 86 62 4315 63 0 Male 38.141 107 130 63 4482 58 14 Female 18.2341 86 103 64 4638 20 17 Male 20.512 82 72 65 4678 63 7 Male 46.6448 96 95 66 4696 54 4 Male 46.9569 101 112 67 4755 24 18 Male 27.5127 105 102 68 4837 42 10 Male 19.6906 83 88 69 4996 51 12 Male 43.0281 77 78 70 5009 50 7 Male 24.3806 61 104 71 5014 46 7 Female 23.7618 75 90 72 5192 60 1 Male 58.6283 87 97 73 5204 71 0 Male 59.0746 97 107 74 5238 44 3 Male 45.1006 99 103 75 5280 83 1 Male 48.6434 78 88 76 5289 52 1 Male 48.5722 84 85 77 5456 48 14 Male 41.1636 80 101 78 5458 44 14 Male 34.4778 84 95 79 5474 65 2 Female 28.6598 95 86 80 5568 64 1 Female 51.9918 75 79 81 5580 56 7 Male 17.7933 86 95 82 5581 65 2 Male 26.3053 85 95 83 5628 51 3 Female 30.2642 81 85 84 6154 43 5 Female 22.6064 74 80 85 6180 59 12 Male 20.7201 67 84 86 6314 58 3 Male 16.6927 80 99 87 6340 71 0 Male 19.3238 76 72 88 6564 69 0 Male 34.4997 67 74 89 6614 57 0 Male 45.1116 80 101 90 6686 44 14 Female 38.3491 90 100 91 6795 55 0 Male 30.7159 87 104 92 7080 64 5 Female 76.6598 76 106 93 7084 54 2 Male 36.5722 87 93 94 7271 55 0 Male 41.7659 100 95 95 7371 55 1 Male 56.7858 80 88 96 2569 49 35 Male 18.7159 50 101 97 3058 56 28 Male 22.2533 65 75 98 3645 43 45 Male 27.4935 72 90 99 3844 73 9 Male 26.1164 79 94 100 4725 124 10 Male 32.9172 93 97 101 4744 65 25 Male 57.566 105 119 102 4807 64 14 Female 47.7974 74 74 103 4892 62 21 Male 22.0397 76 88 104 4962 63 1 Female 25.1964 69 67 105 5125 78 12 Male 17.5387 94 118 106 5222 63 30 Male 22.5298 77 85 107 5253 86 1 Male 33.1335 106 128 108 5386 78 21 Male 20.8761 78 93 109 5534 87 14 Male 29.2621 75 82 110 5712 88 14 Male 22.2697 70 68 111 5837 82 1 Female 33.3087 82 110 112 5879 75 21 Male 25.8453 80 105 113 5893 71 21 Male 22.8118 65 90 114 5916 84 0 Female 26.8556 93 73 115 6410 80 14 Male 32.1725 85 98 116 7173 84 4 Male 24.9801 72 75 117 7221 98 0 Male 63.5044 74 79 118 2453 120 10 Male 37.2758 63 99 119 2653 97 28 Male 30.0068 93 112 120 4218 82 28 Male 25.9904 74 92 121 4542 121 11 Female 21.9576 86 114 122 4902 102 8 Male 16.1424 87 77 123 4933 134 0 Male 18.4559 69 83 124 4941 131 4 Female 19.0144 96 96 125 5085 117 2 Male 49.0267 67 71 126 5111 107 7 Male 21.6947 71 80 127 5154 120 5 Male 22.1903 89 109 128 5222 93 30 Male 22.5298 77 91 129 5298 107 3 Male 22.9569 117 112 130 5339 119 7 Male 21.8152 87 82 131 5387 109 12 Male 21.7988 85 112 132 5414 105 10 Female 40.2765 93 104 133 5494 111 7 Male 54.6913 86 86 134 5896 126 4 Female 26.8775 50 74 135 5901 115 7 Male 22.1739 112 116 136 6135 96 18 Male 26.5626 66 105 137 6173 125 4 Male 35.3046 94 97 138 6214 112 0 Male 60.3176 65 74 139 6253 128 0 Female 46.4038 104 112 140 6433 120 4 Male 23.8604 100 103 141 6665 119 3 Female 23.0171 106 94 142 6834 123 0 Male 30.7488 72 75 143 1176 146 17 Female 19.729 65 98 144 2849 151 0 Male 20.0876 51 86 145 2882 141 18 Male 19.2334 84 85 146 3051 131 13 Male 37.2403 68 79 147 3728 151 6 Male 30.1273 96 105 148 3913 96 42 Female 23.9233 56 80 149 4133 133 14 Male 20 82 94 150 4661 135 17 Female 30.8419 84 93 151 4678 143 7 Male 46.6448 98 107 152 4696 150 4 Male 46.9569 120 120 153 4705 146 1 Female 21.6838 133 111 154 4802 142 0 Male 62.475 101 117 155 4807 139 14 Female 47.7974 80 78 156 4983 146 5 Male 38.3929 107 123 157 5014 151 7 Female 23.7618 97 110 158 5162 144 1 Male 25.0185 130 118 159 5238 150 3 Male 45.1006 117 126 160 5642 162 0 Male 65.87 89 103 161 5699 138 1 Female 34.2231 110 107 162 5713 144 8 Male 16.2683 100 99 163 5804 159 2 Female 28.8515 102 107 164 5818 125 14 Male 34.9268 72 91 165 6314 140 3 Male 16.6927 87 96 166 6664 164 2 Male 24.7337 66 73 167 1048 85 94 Male 20.115 63 82 168 1085 159 11 Male 30.7105 103 97 169 3237 189 9 Male 49.8508 79 82 170 3358 175 4 Male 20.6708 97 97 171 3808 165 7 Male 28.2683 94 111 172 4094 177 2 Male 19.7262 89 102 173 4253 175 3 Male 22.6037 114 118 174 4638 140 17 Male 20.512 89 78 175 4755 128 18 Male 27.5127 105 109 176 4865 142 35 Male 58.3354 84 103 177 4892 148 21 Male 22.0397 106 110 178 5009 174 7 Male 24.3806 77 103 179 5111 177 7 Male 21.6947 72 81 180 5125 173 12 Male 17.5387 106 119 181 5192 179 1 Male 58.6283 93 105 182 5505 171 1 Male 65.4784 95 93 183 5581 176 2 Male 26.3053 96 110 184 5599 148 21 Male 18.7488 72 81 185 5680 184 1 Male 27.7563 84 90 186 5782 108 68 Female 19.6715 69 85 187 6180 177 12 Male 20.7201 81 94 188 6671 184 7 Female 27.8056 91 92 189 2124 173 30 Male 30.7625 76 106 190 2646 187 14 Male 22.9158 97 97 191 2790 211 0 Male 48.8049 89 99 192 4189 202 4 Female 29.462 81 90 193 4775 180 28 Male 53.5551 70 86 194 4933 226 0 Male 18.4559 79 86 195 4962 210 1 Female 25.1964 71 70 196 5208 193 8 Female 21.3771 133 111 197 5456 193 14 Male 41.1636 87 110 198 5668 219 7 Male 40.9227 76 90 199 5712 192 14 Male 22.2697 87 85 200 5893 200 21 Male 22.8118 65 89 201 5916 205 0 Female 26.8556 92 76 202 6122 212 1 Male 56.2108 109 117 203 6136 216 1 Male 32.7912 92 89 204 6175 278 1 Male 51.1704 99 98 205 6228 174 3 Female 31.5537 114 108 206 7173 210 4 Male 24.9801 79 78 207 1176 216 17 Female 19.729 74 100 208 3467 186 42 Male 25.3936 53 69 209 4744 217 25 Male 57.566 108 118 210 5386 241 21 Male 20.8761 80 94 211 5837 242 1 Female 33.3087 93 105 212 6247 228 13 Male 42.3162 77 80 213 1892 276 2 Male 21.7796 87 107 214 2882 262 18 Male 19.2334 94 90 215 3058 236 28 Male 22.2533 85 88 216 4342 263 1 Male 44.063 79 91 217 4865 240 35 Male 58.3354 93 105 218 5085 269 2 Male 49.0267 65 77 219 5222 247 30 Male 22.5298 88 85 220 5339 271 7 Male 21.8152 94 89 221 5474 280 2 Female 28.6598 99 91 222 5600 232 0 Male 48.7885 75 81 223 2826 290 14 Male 23.2334 94 108 224 4725 286 10 Male 32.9172 105 94 225 5204 299 0 Male 59.0746 99 105 226 6498 270 28 Male 24.0767 82 101 227 2081 185 43 Male 17.6975 77 97 228 4678 340 7 Male 46.6448 108 119 229 5397 328 0 Female 62.7981 121 108 230 6214 318 0 Male 60.3176 78 82 231 7034 280 60 Male 23.1376 78 80 232 1493 453 60 Male 17.8042 59 81 233 1836 375 1 Male 47.0554 101 108 234 1939 295 130 Male 28.2738 67 117 235 2646 438 14 Male 22.9158 98 94 236 2653 352 28 Male 30.0068 105 126 237 3226 444 0 Male 27.4552 76 64 238 3467 333 42 Male 25.3936 68 74 239 4342 432 1 Male 44.063 92 107 240 4542 431 11 Female 21.9576 98 114 241 4661 374 17 Female 30.8419 93 95 242 4902 397 8 Male 16.1424 92 86 243 4983 398 5 Male 38.3929 121 132 244 5111 442 7 Male 21.6947 77 86 245 5125 510 12 Male 17.5387 112 125 246 5289 417 1 Male 48.5722 83 83 247 5386 436 21 Male 20.8761 90 103 248 5387 480 12 Male 21.7988 94 116 249 5505 527 1 Male 65.4784 104 87 250 5580 369 7 Male 17.7933 96 107 251 5581 378 2 Male 26.3053 95 95 252 5599 443 21 Male 18.7488 78 80 253 5668 390 7 Male 40.9227 92 92 254 5680 403 1 Male 27.7563 94 93 255 5712 365 14 Male 22.2697 98 86 256 5772 412 35 Male 26.2587 102 104 257 5804 354 2 Female nan 122 105 258 5811 431 25 Male 80.0328 78 80 259 5841 415 8 Male 27.2279 82 83 260 6226 438 0 Male 36.8022 84 92 261 6247 389 13 Male 42.3162 82 80 262 6468 513 60 Male 43.4798 99 94 263 6614 362 0 Male 45.1116 88 106 264 6665 368 3 Female 23.0171 100 92 265 781 714 15 Male 29.8699 85 85 266 1048 576 94 Male 20.115 91 96 267 1157 810 23 Male 17.3881 97 84 268 1493 684 60 Male 17.8042 66 75 269 1611 511 60 Male 23.2799 69 107 270 1624 604 1 Male 19.5619 97 85 271 1939 562 130 Male 28.2738 85 111 272 2498 615 0 Female 17.4292 86 113 273 2826 636 14 Male 23.2334 111 101 274 2849 642 0 Male 20.0876 76 98 275 3032 525 20 Male 16.9391 79 87 276 3226 683 0 Male 27.4552 89 78 277 4218 814 28 Male 25.9904 99 96 278 4807 532 14 Female 47.7974 84 82 279 5014 637 7 Female 23.7618 101 114 280 5222 690 30 Male 22.5298 81 90 281 5253 591 1 Male 33.1335 114 124 282 5628 609 3 Female 30.2642 89 78 283 6059 794 1 Female 16.9801 71 76 284 6228 662 3 Female 31.5537 128 111 285 6247 616 13 Male 42.3162 85 82 286 405 986 0 Male 21.4702 66 116 287 626 870 55 Male 19.7536 80 85 288 1075 907 42 Female 27.2772 63 64 289 2849 1040 0 Male 20.0876 91 103 290 3032 884 20 Male 16.9391 87 93 291 3226 1123 0 Male 27.4552 88 81 292 4864 936 0 Female 53.9767 119 131 293 5474 1100 2 Female 28.6598 94 88 294 5568 1114 1 Female 51.9918 81 82 295 5580 1087 7 Male 17.7933 106 98 296 5581 1113 2 Male 26.3053 99 96 297 5617 1113 17 Male 19.7864 78 87 298 5642 1143 0 Male 65.87 104 109 299 5713 1016 8 Male 16.2683 126 106 300 5837 962 1 Female 33.3087 109 110 301 6140 1077 44 Female 21.4209 65 88 302 7061 923 0 Male 36.8816 74 81 303 651 1491 21 Male 22.0068 71 94 304 2527 1294 0 Male 16.9172 93 104 305 2638 1093 255 Male 16.5613 78 84 306 4865 1363 35 Male 58.3354 88 104 307 5009 1537 7 Male 24.3806 76 112 308 5014 1523 7 Female 23.7618 105 114 309 5085 1512 2 Male 49.0267 75 75 310 1939 1926 130 Male 28.2738 95 108 311 2662 1569 180 Male 28.0821 90 101 312 2826 1809 14 Male 23.2334 104 108 313 2882 1716 18 Male 19.2334 100 103 314 3768 1916 0 Male 19.1102 69 80 315 4356 2000 7 Male 21.399 104 91 316 4638 1779 17 Male 20.512 92 76 317 4696 1769 4 Male 46.9569 105 124 318 4744 1743 25 Male 57.566 97 118 319 6140 1742 44 Female 21.4209 67 87 320 1075 2259 42 Female 27.2772 78 79 321 1939 3111 130 Male 28.2738 88 111 322 2653 2191 28 Male 30.0068 117 129 323 3592 2569 10 Male 61.6646 76 93 324 3808 2434 7 Male 28.2683 105 111 325 651 3412 21 Male 22.0068 68 92 326 1939 3864 130 Male 28.2738 88 105 327 2600 3337 9 Male 43.9398 101 84 328 3835 4933 14 Male 25.9932 91 88 329 2773 7631 42 Male 6.51335 88 103 330 5142 11628 57 Male 16.4326 101 95 331 5964 11038 0 Male 12.8363 71 73 Ketiga \u00b6 Pada langkah ini mengubah nilai dari fitur sex menjadi angak 0 / 1 dengan menggunakan fungsi dari sklearn, yaitu LabelEncode() . #encode fitur tipe biner X = data . iloc [:,:] . values labelEncode_X = LabelEncoder () X [:, 4 ] = labelEncode_X . fit_transform ( X [:, 4 ]) Keempat \u00b6 Selanjutnya kita mengimplementasikan rumus jarak ke dalam bentuk fungsi python. yaitu: eulidianDistance() dengan fungsi jarak tipe binary distanceSimetris (). def Zscore ( x , mean , std ): top = x - mean if top == 0 : return top else : return round ( top / std , 2 ) def normalisasi ( num , col_x ): return Zscore ( num , pd . Series ( data [ col_x ] . values ) . mean (), pd . Series ( data [ col_x ] . values ) . std ()) #menghitung jarak tipe numerikal def euclidianDistance ( x , y ): dis = 0 for i in range ( len ( x )): dis += ( x [ i ] - y [ i ]) ** 2 return round ( mt . sqrt ( dis ), 2 ) #Menghitung jarak tipe binary def distanceSimetris ( x , y ): q = r = s = t = 0 for i in range ( len ( x )): if x [ i ] == 1 and y [ i ] == 1 : q += 1 elif x [ i ] == 1 and y [ i ] == 0 : r += 1 elif x [ i ] == 0 and y [ i ] == 1 : s += 1 elif x [ i ] == 0 and y [ i ] == 0 : t += 1 return (( r + s ) / ( q + r + s + t )) Kelima \u00b6 Kemudian dari dataset tersebut, kita lakukan pengecekan dengan mencari baris yang missing values,. c_j = 0 for j in df [ 'age' ] . isna (): if j == True : col_missing = c_j c_j += 1 Keenam \u00b6 Pada langkah berikut, kita lakukan perhitungan jarak pada data yang missing dengan seluruh tetangganya dan menampungnya pada dapat dictionary yang ada. missing_data = df . iloc [ col_missing , [ 2 , 3 , 6 , 7 ]] . values missing_normal = [ normalisasi ( missing_data [ 0 ], data . columns [ 2 ]), normalisasi ( missing_data [ 1 ], data . columns [ 3 ]), normalisasi ( missing_data [ 2 ], data . columns [ 6 ]), normalisasi ( missing_data [ 3 ], data . columns [ 7 ])] for i in range ( len ( data [ data . columns [ 0 ]])): if i == col_missing : continue ; select_data = df . iloc [ i , [ 2 , 3 , 6 , 7 ]] . values normal_data = [ normalisasi ( select_data [ 0 ], data . columns [ 2 ]), normalisasi ( select_data [ 1 ], data . columns [ 3 ]), normalisasi ( select_data [ 2 ], data . columns [ 6 ]), normalisasi ( select_data [ 3 ], data . columns [ 7 ])] data . loc [ i , 'jarak' ] = euclidianDistance ( missing_normal , normal_data ) + distanceSimetris ([ X [ col_missing , 4 ]],[ X [ i , 4 ]]) Ketujuh \u00b6 Kemudian kita urutkan data tersebut berdasarkan jarak dari yang terkecil sampai ke terbesar. Selanjutnya kita mengisi data yang hilang dengan mengambil rata-rata dari 2 tetangga terdekat. df = pd . DataFrame ( data ) df . sort_values ( by = 'jarak' , axis = 0 , ascending = True , inplace = True ) df . iloc [ - 1 , [ 5 ]] = round ( df . iloc [ 0 : 2 , 5 ] . mean (), 2 ) df . style . hide_index () Berikut merupakan tampilan dari data yang telah di urutkan. pada baris terakhir telihat bahwa kolom age sudah terisi dengan angka 42.24 hasil dari rata-rata 2 tetangga terdekat. no id days duration sex age piq viq jarak 229 5397 328 0 Female 62.7981 121 108 0.25 13 4705 18 1 Female 21.6838 127 109 0.53 205 6228 174 3 Female 31.5537 114 108 0.6 284 6228 662 3 Female 31.5537 128 111 0.64 161 5699 138 1 Female 34.2231 110 107 0.84 153 4705 146 1 Female 21.6838 133 111 0.86 196 5208 193 8 Female 21.3771 133 111 0.88 300 5837 962 1 Female 33.3087 109 110 1.07 139 6253 128 0 Female 46.4038 104 112 1.31 141 6665 119 3 Female 23.0171 106 94 1.33 163 5804 159 2 Female 28.8515 102 107 1.35 20 5162 33 1 Male 25.0185 118 101 1.48 279 5014 637 7 Female 23.7618 101 114 1.56 129 5298 107 3 Male 22.9569 117 112 1.64 9 4253 40 3 Male 22.6037 115 110 1.66 308 5014 1523 7 Female 23.7618 105 114 1.67 299 5713 1016 8 Male 16.2683 126 106 1.68 48 2761 40 3 Female 24.3696 98 112 1.69 157 5014 151 7 Female 23.7618 97 110 1.72 264 6665 368 3 Female 23.0171 100 92 1.73 34 6163 21 1 Male 19.3593 112 106 1.73 240 4542 431 11 Female 21.9576 98 114 1.75 221 5474 280 2 Female 28.6598 99 91 1.82 28 5699 26 1 Female 34.2231 95 108 1.83 124 4941 131 4 Female 19.0144 96 96 1.85 211 5837 242 1 Female 33.3087 93 105 1.92 292 4864 936 0 Female 53.9767 119 131 1.93 273 2826 636 14 Male 23.2334 111 101 1.94 132 5414 105 10 Female 40.2765 93 104 1.96 45 7548 31 0 Male 24.3669 108 106 1.98 22 5208 31 8 Female 21.3771 97 90 2 135 5901 115 7 Male 22.1739 112 116 2.07 173 4253 175 3 Male 22.6037 114 118 2.08 158 5162 144 1 Male 25.0185 130 118 2.09 152 4696 150 4 Male 46.9569 120 120 2.1 241 4661 374 17 Female 30.8419 93 95 2.13 55 3655 57 5 Female 21.9055 90 103 2.14 202 6122 212 1 Male 56.2108 109 117 2.22 90 6686 44 14 Female 38.3491 90 100 2.22 23 5253 29 1 Male 33.1335 104 105 2.23 79 5474 65 2 Female 28.6598 95 86 2.26 188 6671 184 7 Female 27.8056 91 92 2.26 293 5474 1100 2 Female 28.6598 94 88 2.3 67 4755 24 18 Male 27.5127 105 102 2.33 175 4755 128 18 Male 27.5127 105 109 2.33 177 4892 148 21 Male 22.0397 106 110 2.35 295 5580 1087 7 Male 17.7933 106 98 2.35 50 3277 51 1 Male 37.4702 104 96 2.38 21 5174 38 4 Female 37.2704 87 99 2.38 228 4678 340 7 Male 46.6448 108 119 2.38 298 5642 1143 0 Male 65.87 104 109 2.41 224 4725 286 10 Male 32.9172 105 94 2.41 233 1836 375 1 Male 47.0554 101 108 2.41 168 1085 159 11 Male 30.7105 103 97 2.43 63 4482 58 14 Female 18.2341 86 103 2.44 272 2498 615 0 Female 17.4292 86 113 2.46 140 6433 120 4 Male 23.8604 100 103 2.48 281 5253 591 1 Male 33.1335 114 124 2.48 121 4542 121 11 Female 21.9576 86 114 2.5 66 4696 54 4 Male 46.9569 101 112 2.5 180 5125 173 12 Male 17.5387 106 119 2.51 225 5204 299 0 Male 59.0746 99 105 2.52 40 6937 18 0 Female 21.191 94 81 2.53 162 5713 144 8 Male 16.2683 100 99 2.55 159 5238 150 3 Male 45.1006 117 126 2.55 74 5238 44 3 Male 45.1006 99 103 2.55 43 7309 31 0 Female 50.6667 85 95 2.57 209 4744 217 25 Male 57.566 108 118 2.59 204 6175 278 1 Male 51.1704 99 98 2.6 17 4983 33 5 Male 38.3929 102 117 2.61 151 4678 143 7 Male 46.6448 98 107 2.62 245 5125 510 12 Male 17.5387 112 125 2.63 156 4983 146 5 Male 38.3929 107 123 2.64 94 7271 55 0 Male 41.7659 100 95 2.65 154 4802 142 0 Male 62.475 101 117 2.65 111 5837 82 1 Female 33.3087 82 110 2.69 73 5204 71 0 Male 59.0746 97 107 2.69 57 3919 58 1 Male 30.3655 99 95 2.7 150 4661 135 17 Female 30.8419 84 93 2.72 52 3359 59 9 Female 56.8953 84 91 2.72 53 3373 39 28 Female 26.308 87 91 2.73 250 5580 369 7 Male 17.7933 96 107 2.74 147 3728 151 6 Male 30.1273 96 105 2.74 249 5505 527 1 Male 65.4784 104 87 2.75 183 5581 176 2 Male 26.3053 96 110 2.76 170 3358 175 4 Male 20.6708 97 97 2.76 101 4744 65 25 Male 57.566 105 119 2.77 296 5581 1113 2 Male 26.3053 99 96 2.78 60 4183 42 3 Male 26.2341 98 116 2.8 312 2826 1809 14 Male 23.2334 104 108 2.82 190 2646 187 14 Male 22.9158 97 97 2.82 33 6122 29 1 Male 56.2108 95 103 2.82 235 2646 438 14 Male 22.9158 98 94 2.83 256 5772 412 35 Male 26.2587 102 104 2.84 41 6977 30 1 Male 36.2108 97 94 2.86 201 5916 205 0 Female 26.8556 92 76 2.87 65 4678 63 7 Male 46.6448 96 95 2.89 282 5628 609 3 Female 30.2642 89 78 2.91 192 4189 202 4 Female 29.462 81 90 2.91 223 2826 290 14 Male 23.2334 94 108 2.92 171 3808 165 7 Male 28.2683 94 111 2.92 251 5581 378 2 Male 26.3053 95 95 2.93 243 4983 398 5 Male 38.3929 121 132 2.93 181 5192 179 1 Male 58.6283 93 105 2.93 137 6173 125 4 Male 35.3046 94 97 2.95 107 5253 86 1 Male 33.1335 106 128 2.97 277 4218 814 28 Male 25.9904 99 96 2.97 114 5916 84 0 Female 26.8556 93 73 2.98 3 3547 40 1 Male 55.9151 95 116 2.98 313 2882 1716 18 Male 19.2334 100 103 2.99 182 5505 171 1 Male 65.4784 95 93 2.99 239 4342 432 1 Male 44.063 92 107 3 278 4807 532 14 Female 47.7974 84 82 3.03 25 5640 34 7 Male 25.9986 93 113 3.03 100 4725 124 10 Male 32.9172 93 97 3.04 254 5680 403 1 Male 27.7563 94 93 3.04 248 5387 480 12 Male 21.7988 94 116 3.05 62 4315 63 0 Male 38.141 107 130 3.05 92 7080 64 5 Female 76.6598 76 106 3.05 83 5628 51 3 Female 30.2642 81 85 3.07 304 2527 1294 0 Male 16.9172 93 104 3.09 8 3808 31 7 Male 28.2683 91 110 3.11 105 5125 78 12 Male 17.5387 94 118 3.12 236 2653 352 28 Male 30.0068 105 126 3.13 315 4356 2000 7 Male 21.399 104 91 3.13 289 2849 1040 0 Male 20.0876 91 103 3.14 255 5712 365 14 Male 22.2697 98 86 3.14 317 4696 1769 4 Male 46.9569 105 124 3.16 220 5339 271 7 Male 21.8152 94 89 3.18 160 5642 162 0 Male 65.87 89 103 3.19 324 3808 2434 7 Male 28.2683 105 111 3.2 172 4094 177 2 Male 19.7262 89 102 3.2 270 1624 604 1 Male 19.5619 97 85 3.2 253 5668 390 7 Male 40.9227 92 92 3.2 127 5154 120 5 Male 22.1903 89 109 3.21 214 2882 262 18 Male 19.2334 94 90 3.22 119 2653 97 28 Male 30.0068 93 112 3.23 191 2790 211 0 Male 48.8049 89 99 3.23 294 5568 1114 1 Female 51.9918 81 82 3.23 51 3346 44 18 Female 57.2758 79 85 3.25 263 6614 362 0 Male 45.1116 88 106 3.25 207 1176 216 17 Female 19.729 74 100 3.25 247 5386 436 21 Male 20.8761 90 103 3.25 29 5713 36 8 Male 16.2683 89 97 3.28 203 6136 216 1 Male 32.7912 92 89 3.29 217 4865 240 35 Male 58.3354 93 105 3.3 71 5014 46 7 Female 23.7618 75 90 3.3 35 6179 22 2 Male 38.0123 89 95 3.31 213 1892 276 2 Male 21.7796 87 107 3.33 91 6795 55 0 Male 30.7159 87 104 3.34 15 4802 36 0 Male 62.475 88 97 3.34 72 5192 60 1 Male 58.6283 87 97 3.4 61 4189 69 4 Female 29.462 75 86 3.4 267 1157 810 23 Male 17.3881 97 84 3.4 197 5456 193 14 Male 41.1636 87 110 3.4 165 6314 140 3 Male 16.6927 87 96 3.41 242 4902 397 8 Male 16.1424 92 86 3.42 155 4807 139 14 Female 47.7974 80 78 3.42 318 4744 1743 25 Male 57.566 97 118 3.43 93 7084 54 2 Male 36.5722 87 93 3.49 81 5580 56 7 Male 17.7933 86 95 3.5 131 5387 109 12 Male 21.7988 85 112 3.54 115 6410 80 14 Male 32.1725 85 98 3.55 82 5581 65 2 Male 26.3053 85 95 3.56 322 2653 2191 28 Male 30.0068 117 129 3.57 12 4542 22 11 Female 21.9576 71 89 3.58 1 3358 30 4 Male 20.6708 87 89 3.6 30 5736 18 9 Male 16.1478 89 86 3.6 290 3032 884 20 Male 16.9391 87 93 3.61 56 3762 48 6 Male 20.3559 85 93 3.61 80 5568 64 1 Female 51.9918 75 79 3.63 38 6870 22 0 Male 42.4832 84 95 3.63 84 6154 43 5 Female 22.6064 74 80 3.65 78 5458 44 14 Male 34.4778 84 95 3.66 46 2364 41 14 Male 25.8097 84 94 3.68 260 6226 438 0 Male 36.8022 84 92 3.68 39 6914 43 0 Male 61.5222 85 90 3.69 24 5298 30 3 Male 22.9569 87 86 3.7 31 5754 36 1 Male 16.3368 87 86 3.7 16 4941 46 4 Female 19.0144 69 88 3.72 185 5680 184 1 Male 27.7563 84 90 3.73 306 4865 1363 35 Male 58.3354 88 104 3.73 27 5680 17 1 Male 27.7563 84 90 3.74 2 3535 16 17 Male 55.2882 95 77 3.75 133 5494 111 7 Male 54.6913 86 86 3.75 36 6671 30 7 Female 27.8056 71 82 3.76 19 5154 35 5 Male 22.1903 82 95 3.76 199 5712 192 14 Male 22.2697 87 85 3.76 262 6468 513 60 Male 43.4798 99 94 3.81 149 4133 133 14 Male 20 82 94 3.81 89 6614 57 0 Male 45.1116 80 101 3.81 54 3544 32 14 Male 54.5298 81 98 3.81 176 4865 142 35 Male 58.3354 84 103 3.82 86 6314 58 3 Male 16.6927 80 99 3.82 77 5456 48 14 Male 41.1636 80 101 3.84 130 5339 119 7 Male 21.8152 87 82 3.85 187 6180 177 12 Male 20.7201 81 94 3.85 226 6498 270 28 Male 24.0767 82 101 3.85 143 1176 146 17 Female 19.729 65 98 3.85 42 7120 39 0 Male 69.7057 84 86 3.86 219 5222 247 30 Male 22.5298 88 85 3.87 10 4356 31 7 Male 21.399 86 83 3.87 68 4837 42 10 Male 19.6906 83 88 3.88 112 5879 75 21 Male 25.8453 80 105 3.89 265 781 714 15 Male 29.8699 85 85 3.89 76 5289 52 1 Male 48.5722 84 85 3.9 102 4807 64 14 Female 47.7974 74 74 3.9 291 3226 1123 0 Male 27.4552 88 81 3.9 215 3058 236 28 Male 22.2533 85 88 3.91 276 3226 683 0 Male 27.4552 89 78 3.92 145 2882 141 18 Male 19.2334 84 85 3.95 44 7321 23 0 Male 26.0041 84 83 3.97 283 6059 794 1 Female 16.9801 71 76 3.97 174 4638 140 17 Male 20.512 89 78 3.97 210 5386 241 21 Male 20.8761 80 94 3.98 285 6247 616 13 Male 42.3162 85 82 3.98 99 3844 73 9 Male 26.1164 79 94 3.98 178 5009 174 7 Male 24.3806 77 103 3.99 58 4094 50 2 Male 19.7262 79 93 3.99 246 5289 417 1 Male 48.5722 83 83 4.02 216 4342 263 1 Male 44.063 79 91 4.02 95 7371 55 1 Male 56.7858 80 88 4.04 122 4902 102 8 Male 16.1424 87 77 4.07 259 5841 415 8 Male 27.2279 82 83 4.08 274 2849 642 0 Male 20.0876 76 98 4.09 280 5222 690 30 Male 22.5298 81 90 4.11 320 1075 2259 42 Female 27.2772 78 79 4.13 108 5386 78 21 Male 20.8761 78 93 4.13 14 4744 15 25 Male 57.566 82 85 4.15 75 5280 83 1 Male 48.6434 78 88 4.16 194 4933 226 0 Male 18.4559 79 86 4.16 316 4638 1779 17 Male 20.512 92 76 4.18 195 4962 210 1 Female 25.1964 71 70 4.19 18 5129 26 1 Male 25.0459 77 89 4.2 275 3032 525 20 Male 16.9391 79 87 4.2 261 6247 389 13 Male 42.3162 82 80 4.21 189 2124 173 30 Male 30.7625 76 106 4.23 198 5668 219 7 Male 40.9227 76 90 4.23 11 4384 35 8 Male 36.3806 76 90 4.24 307 5009 1537 7 Male 24.3806 76 112 4.26 244 5111 442 7 Male 21.6947 77 86 4.28 169 3237 189 9 Male 49.8508 79 82 4.3 297 5617 1113 17 Male 19.7864 78 87 4.3 301 6140 1077 44 Female 21.4209 65 88 4.32 327 2600 3337 9 Male 43.9398 101 84 4.33 128 5222 93 30 Male 22.5298 77 91 4.33 230 6214 318 0 Male 60.3176 78 82 4.34 103 4892 62 21 Male 22.0397 76 88 4.36 319 6140 1742 44 Female 21.4209 67 87 4.36 227 2081 185 43 Male 17.6975 77 97 4.42 206 7173 210 4 Male 24.9801 79 78 4.44 104 4962 63 1 Female 25.1964 69 67 4.44 120 4218 82 28 Male 25.9904 74 92 4.47 252 5599 443 21 Male 18.7488 78 80 4.48 106 5222 63 30 Male 22.5298 77 85 4.48 164 5818 125 14 Male 34.9268 72 91 4.49 212 6247 228 13 Male 42.3162 77 80 4.49 258 5811 431 25 Male 80.0328 78 80 4.52 222 5600 232 0 Male 48.7885 75 81 4.55 109 5534 87 14 Male 29.2621 75 82 4.55 186 5782 108 68 Female 19.6715 69 85 4.56 69 4996 51 12 Male 43.0281 77 78 4.58 64 4638 20 17 Male 20.512 82 72 4.59 32 5776 26 8 Male 17.128 71 88 4.6 302 7061 923 0 Male 36.8816 74 81 4.64 303 651 1491 21 Male 22.0068 71 94 4.67 59 4133 34 14 Male 20 70 88 4.69 117 7221 98 0 Male 63.5044 74 79 4.69 37 6859 27 1 Male 34.2122 74 79 4.69 323 3592 2569 10 Male 61.6646 76 93 4.72 179 5111 177 7 Male 21.6947 72 81 4.73 287 626 870 55 Male 19.7536 80 85 4.75 7 3807 37 5 Male 24.6762 74 77 4.76 136 6135 96 18 Male 26.5626 66 105 4.76 184 5599 148 21 Male 18.7488 72 81 4.8 26 5668 27 7 Male 40.9227 72 79 4.81 286 405 986 0 Male 21.4702 66 116 4.82 126 5111 107 7 Male 21.6947 71 80 4.82 193 4775 180 28 Male 53.5551 70 86 4.83 123 4933 134 0 Male 18.4559 69 83 4.85 87 6340 71 0 Male 19.3238 76 72 4.85 98 3645 43 45 Male 27.4935 72 90 4.86 309 5085 1512 2 Male 49.0267 75 75 4.91 118 2453 120 10 Male 37.2758 63 99 4.94 116 7173 84 4 Male 24.9801 72 75 4.94 142 6834 123 0 Male 30.7488 72 75 4.94 85 6180 59 12 Male 20.7201 67 84 4.96 148 3913 96 42 Female 23.9233 56 80 4.96 47 2600 3333 9 Male 43.9398 86 80 4.97 6 3790 13 3 Male 57.0623 76 69 4.99 113 5893 71 21 Male 22.8118 65 90 4.99 200 5893 200 21 Male 22.8118 65 89 5.01 70 5009 50 7 Male 24.3806 61 104 5.05 146 3051 131 13 Male 37.2403 68 79 5.05 231 7034 280 60 Male 23.1376 78 80 5.07 288 1075 907 42 Female 27.2772 63 64 5.12 266 1048 576 94 Male 20.115 91 96 5.14 269 1611 511 60 Male 23.2799 69 107 5.16 314 3768 1916 0 Male 19.1102 69 80 5.16 237 3226 444 0 Male 27.4552 76 64 5.21 134 5896 126 4 Female 26.8775 50 74 5.25 88 6564 69 0 Male 34.4997 67 74 5.26 218 5085 269 2 Male 49.0267 65 77 5.26 5 3728 19 6 Male 30.1273 67 73 5.3 166 6664 164 2 Male 24.7337 66 73 5.34 110 5712 88 14 Male 22.2697 70 68 5.36 138 6214 112 0 Male 60.3176 65 74 5.37 125 5085 117 2 Male 49.0267 67 71 5.38 97 3058 56 28 Male 22.2533 65 75 5.45 238 3467 333 42 Male 25.3936 68 74 5.46 49 3237 65 9 Male 49.8508 67 67 5.55 325 651 3412 21 Male 22.0068 68 92 5.62 328 3835 4933 14 Male 25.9932 91 88 5.69 4 3592 13 10 Male 61.6646 59 73 5.77 268 1493 684 60 Male 17.8042 66 75 5.83 144 2849 151 0 Male 20.0876 51 86 5.89 96 2569 49 35 Male 18.7159 50 101 5.94 232 1493 453 60 Male 17.8042 59 81 6.03 310 1939 1926 130 Male 28.2738 95 108 6.41 208 3467 186 42 Male 25.3936 53 69 6.45 167 1048 85 94 Male 20.115 63 82 6.51 271 1939 562 130 Male 28.2738 85 111 6.51 321 1939 3111 130 Male 28.2738 88 111 6.93 234 1939 295 130 Male 28.2738 67 117 7.17 326 1939 3864 130 Male 28.2738 88 105 7.22 329 2773 7631 42 Male 6.51335 88 103 7.96 311 2662 1569 180 Male 28.0821 90 101 8.24 331 5964 11038 0 Male 12.8363 71 73 11.23 330 5142 11628 57 Male 16.4326 101 95 11.25 305 2638 1093 255 Male 16.5613 78 84 11.27 257 5804 354 2 Female 42.24 122 105 nan","title":"Mangatasi Missing Values dengan K-NN"},{"location":"missing knn/#missing-values","text":"Missing Values (nilai yang hilang) adalah kejadian umum, dimana nilai yang hilang dapat menandakan sejumlah hal berbeda dalam data. Dan mungkin data tidak tersedia atau tidak berlaku. Missing value biasanya disebabkan oleh orang yang memasukkan data dan tidak tahu nilai yang benar, atau tidak mengisinya. Metode penambangan data bervariasi dalam cara mereka memperlakukan nilai yang hilang. Biasanya, mereka mengabaikan nilai yang hilang, atau mengecualikan catatan yang berisi nilai yang hilang, atau mengganti nilai yang hilang dengan nilai tengah, atau menyimpulkan nilai yang hilang dari nilai yang ada.","title":"Missing Values"},{"location":"missing knn/#algoritma-k-nn-k-nearest-neighbors","text":"Algoritma K-Nearest Naighbors adalah suatu algoritma klasifikasi sederhana dimana hasil dari instance yang baru diklasifikasikan berdasarkan mayoritas dari kategori k-tetangga terdekat. Algoritma ini memiliki tujuan untuk mengklasifikasi objek baru berdasarkan atribut dan sample-sample data training. langkah penyelesaian yang dilakukan oleh algoritma tersebut adalah: Kita harus menentukan jumlah tetangga terdekat yang nantinya akan kita hitung. Misalnya : kita menentukan 2 tetangga terdekat (k=2). Hitung jarak objek yang dipilih dengan seluruh tetangga yang ada. kemudian urutkan berdasarkan jarak yang diperoleh dari yang terkecil hingga ke terbesar. Ambil 2 tetangga yang paling dekat atau nilai jarak yang terkecil, dan ambil rata-ratanya.","title":"Algoritma K-NN (k-Nearest Neighbors)"},{"location":"missing knn/#mengatasi-missing-value-menggunakan-algoritma-k-nn-pada-python","text":"","title":"Mengatasi Missing Value Menggunakan Algoritma K-NN pada Python"},{"location":"missing knn/#alat-dan-bahan","text":"Pada kasus kali ini, saya menggunakan dataset dari internet, yang bisa diunduh disini . Pada dataset tersebut terdapat 1 fitur bertipe binary dan 5 fitur bertipe numerikal. Pada fitur age dataset telah saya modif dengan mengubah dalam bentuk .csv dan memberikan missing value pada baris ke-257. Untuk mempermudah dalam penyelesaian kasus ini, perlu di siapkan library python untuk mempermudah dalam pengerjaan. Library ini dapat di unduh secara gratis dari internet. Berikut merupakan library yang harus di persiapkan: pandas, digunakan untuk data manajemen dan data analysis. scipy, merupakan library berisi kumpulan algoritma dan fungsi matematika.","title":"Alat dan Bahan"},{"location":"missing knn/#pertama","text":"Langkah pertama yang harus dilakukan adalah memasukkan library yang telah diunduh sebelumnya. import pandas as pd import math as mt from sklearn.preprocessing import LabelEncoder","title":"Pertama"},{"location":"missing knn/#kedua","text":"Selanjutnya kita mengambil file csv tersebut. data = pd . read_csv ( 'Wong.csv' , delimiter = ';' , decimal = ',' ) df = pd . DataFrame ( data ) df . style . highlight_null ( null_color = 'red' ) . hide_index () Maka akan tampil sebagai barikut: no id days duration sex age piq viq 1 3358 30 4 Male 20.6708 87 89 2 3535 16 17 Male 55.2882 95 77 3 3547 40 1 Male 55.9151 95 116 4 3592 13 10 Male 61.6646 59 73 5 3728 19 6 Male 30.1273 67 73 6 3790 13 3 Male 57.0623 76 69 7 3807 37 5 Male 24.6762 74 77 8 3808 31 7 Male 28.2683 91 110 9 4253 40 3 Male 22.6037 115 110 10 4356 31 7 Male 21.399 86 83 11 4384 35 8 Male 36.3806 76 90 12 4542 22 11 Female 21.9576 71 89 13 4705 18 1 Female 21.6838 127 109 14 4744 15 25 Male 57.566 82 85 15 4802 36 0 Male 62.475 88 97 16 4941 46 4 Female 19.0144 69 88 17 4983 33 5 Male 38.3929 102 117 18 5129 26 1 Male 25.0459 77 89 19 5154 35 5 Male 22.1903 82 95 20 5162 33 1 Male 25.0185 118 101 21 5174 38 4 Female 37.2704 87 99 22 5208 31 8 Female 21.3771 97 90 23 5253 29 1 Male 33.1335 104 105 24 5298 30 3 Male 22.9569 87 86 25 5640 34 7 Male 25.9986 93 113 26 5668 27 7 Male 40.9227 72 79 27 5680 17 1 Male 27.7563 84 90 28 5699 26 1 Female 34.2231 95 108 29 5713 36 8 Male 16.2683 89 97 30 5736 18 9 Male 16.1478 89 86 31 5754 36 1 Male 16.3368 87 86 32 5776 26 8 Male 17.128 71 88 33 6122 29 1 Male 56.2108 95 103 34 6163 21 1 Male 19.3593 112 106 35 6179 22 2 Male 38.0123 89 95 36 6671 30 7 Female 27.8056 71 82 37 6859 27 1 Male 34.2122 74 79 38 6870 22 0 Male 42.4832 84 95 39 6914 43 0 Male 61.5222 85 90 40 6937 18 0 Female 21.191 94 81 41 6977 30 1 Male 36.2108 97 94 42 7120 39 0 Male 69.7057 84 86 43 7309 31 0 Female 50.6667 85 95 44 7321 23 0 Male 26.0041 84 83 45 7548 31 0 Male 24.3669 108 106 46 2364 41 14 Male 25.8097 84 94 47 2600 3333 9 Male 43.9398 86 80 48 2761 40 3 Female 24.3696 98 112 49 3237 65 9 Male 49.8508 67 67 50 3277 51 1 Male 37.4702 104 96 51 3346 44 18 Female 57.2758 79 85 52 3359 59 9 Female 56.8953 84 91 53 3373 39 28 Female 26.308 87 91 54 3544 32 14 Male 54.5298 81 98 55 3655 57 5 Female 21.9055 90 103 56 3762 48 6 Male 20.3559 85 93 57 3919 58 1 Male 30.3655 99 95 58 4094 50 2 Male 19.7262 79 93 59 4133 34 14 Male 20 70 88 60 4183 42 3 Male 26.2341 98 116 61 4189 69 4 Female 29.462 75 86 62 4315 63 0 Male 38.141 107 130 63 4482 58 14 Female 18.2341 86 103 64 4638 20 17 Male 20.512 82 72 65 4678 63 7 Male 46.6448 96 95 66 4696 54 4 Male 46.9569 101 112 67 4755 24 18 Male 27.5127 105 102 68 4837 42 10 Male 19.6906 83 88 69 4996 51 12 Male 43.0281 77 78 70 5009 50 7 Male 24.3806 61 104 71 5014 46 7 Female 23.7618 75 90 72 5192 60 1 Male 58.6283 87 97 73 5204 71 0 Male 59.0746 97 107 74 5238 44 3 Male 45.1006 99 103 75 5280 83 1 Male 48.6434 78 88 76 5289 52 1 Male 48.5722 84 85 77 5456 48 14 Male 41.1636 80 101 78 5458 44 14 Male 34.4778 84 95 79 5474 65 2 Female 28.6598 95 86 80 5568 64 1 Female 51.9918 75 79 81 5580 56 7 Male 17.7933 86 95 82 5581 65 2 Male 26.3053 85 95 83 5628 51 3 Female 30.2642 81 85 84 6154 43 5 Female 22.6064 74 80 85 6180 59 12 Male 20.7201 67 84 86 6314 58 3 Male 16.6927 80 99 87 6340 71 0 Male 19.3238 76 72 88 6564 69 0 Male 34.4997 67 74 89 6614 57 0 Male 45.1116 80 101 90 6686 44 14 Female 38.3491 90 100 91 6795 55 0 Male 30.7159 87 104 92 7080 64 5 Female 76.6598 76 106 93 7084 54 2 Male 36.5722 87 93 94 7271 55 0 Male 41.7659 100 95 95 7371 55 1 Male 56.7858 80 88 96 2569 49 35 Male 18.7159 50 101 97 3058 56 28 Male 22.2533 65 75 98 3645 43 45 Male 27.4935 72 90 99 3844 73 9 Male 26.1164 79 94 100 4725 124 10 Male 32.9172 93 97 101 4744 65 25 Male 57.566 105 119 102 4807 64 14 Female 47.7974 74 74 103 4892 62 21 Male 22.0397 76 88 104 4962 63 1 Female 25.1964 69 67 105 5125 78 12 Male 17.5387 94 118 106 5222 63 30 Male 22.5298 77 85 107 5253 86 1 Male 33.1335 106 128 108 5386 78 21 Male 20.8761 78 93 109 5534 87 14 Male 29.2621 75 82 110 5712 88 14 Male 22.2697 70 68 111 5837 82 1 Female 33.3087 82 110 112 5879 75 21 Male 25.8453 80 105 113 5893 71 21 Male 22.8118 65 90 114 5916 84 0 Female 26.8556 93 73 115 6410 80 14 Male 32.1725 85 98 116 7173 84 4 Male 24.9801 72 75 117 7221 98 0 Male 63.5044 74 79 118 2453 120 10 Male 37.2758 63 99 119 2653 97 28 Male 30.0068 93 112 120 4218 82 28 Male 25.9904 74 92 121 4542 121 11 Female 21.9576 86 114 122 4902 102 8 Male 16.1424 87 77 123 4933 134 0 Male 18.4559 69 83 124 4941 131 4 Female 19.0144 96 96 125 5085 117 2 Male 49.0267 67 71 126 5111 107 7 Male 21.6947 71 80 127 5154 120 5 Male 22.1903 89 109 128 5222 93 30 Male 22.5298 77 91 129 5298 107 3 Male 22.9569 117 112 130 5339 119 7 Male 21.8152 87 82 131 5387 109 12 Male 21.7988 85 112 132 5414 105 10 Female 40.2765 93 104 133 5494 111 7 Male 54.6913 86 86 134 5896 126 4 Female 26.8775 50 74 135 5901 115 7 Male 22.1739 112 116 136 6135 96 18 Male 26.5626 66 105 137 6173 125 4 Male 35.3046 94 97 138 6214 112 0 Male 60.3176 65 74 139 6253 128 0 Female 46.4038 104 112 140 6433 120 4 Male 23.8604 100 103 141 6665 119 3 Female 23.0171 106 94 142 6834 123 0 Male 30.7488 72 75 143 1176 146 17 Female 19.729 65 98 144 2849 151 0 Male 20.0876 51 86 145 2882 141 18 Male 19.2334 84 85 146 3051 131 13 Male 37.2403 68 79 147 3728 151 6 Male 30.1273 96 105 148 3913 96 42 Female 23.9233 56 80 149 4133 133 14 Male 20 82 94 150 4661 135 17 Female 30.8419 84 93 151 4678 143 7 Male 46.6448 98 107 152 4696 150 4 Male 46.9569 120 120 153 4705 146 1 Female 21.6838 133 111 154 4802 142 0 Male 62.475 101 117 155 4807 139 14 Female 47.7974 80 78 156 4983 146 5 Male 38.3929 107 123 157 5014 151 7 Female 23.7618 97 110 158 5162 144 1 Male 25.0185 130 118 159 5238 150 3 Male 45.1006 117 126 160 5642 162 0 Male 65.87 89 103 161 5699 138 1 Female 34.2231 110 107 162 5713 144 8 Male 16.2683 100 99 163 5804 159 2 Female 28.8515 102 107 164 5818 125 14 Male 34.9268 72 91 165 6314 140 3 Male 16.6927 87 96 166 6664 164 2 Male 24.7337 66 73 167 1048 85 94 Male 20.115 63 82 168 1085 159 11 Male 30.7105 103 97 169 3237 189 9 Male 49.8508 79 82 170 3358 175 4 Male 20.6708 97 97 171 3808 165 7 Male 28.2683 94 111 172 4094 177 2 Male 19.7262 89 102 173 4253 175 3 Male 22.6037 114 118 174 4638 140 17 Male 20.512 89 78 175 4755 128 18 Male 27.5127 105 109 176 4865 142 35 Male 58.3354 84 103 177 4892 148 21 Male 22.0397 106 110 178 5009 174 7 Male 24.3806 77 103 179 5111 177 7 Male 21.6947 72 81 180 5125 173 12 Male 17.5387 106 119 181 5192 179 1 Male 58.6283 93 105 182 5505 171 1 Male 65.4784 95 93 183 5581 176 2 Male 26.3053 96 110 184 5599 148 21 Male 18.7488 72 81 185 5680 184 1 Male 27.7563 84 90 186 5782 108 68 Female 19.6715 69 85 187 6180 177 12 Male 20.7201 81 94 188 6671 184 7 Female 27.8056 91 92 189 2124 173 30 Male 30.7625 76 106 190 2646 187 14 Male 22.9158 97 97 191 2790 211 0 Male 48.8049 89 99 192 4189 202 4 Female 29.462 81 90 193 4775 180 28 Male 53.5551 70 86 194 4933 226 0 Male 18.4559 79 86 195 4962 210 1 Female 25.1964 71 70 196 5208 193 8 Female 21.3771 133 111 197 5456 193 14 Male 41.1636 87 110 198 5668 219 7 Male 40.9227 76 90 199 5712 192 14 Male 22.2697 87 85 200 5893 200 21 Male 22.8118 65 89 201 5916 205 0 Female 26.8556 92 76 202 6122 212 1 Male 56.2108 109 117 203 6136 216 1 Male 32.7912 92 89 204 6175 278 1 Male 51.1704 99 98 205 6228 174 3 Female 31.5537 114 108 206 7173 210 4 Male 24.9801 79 78 207 1176 216 17 Female 19.729 74 100 208 3467 186 42 Male 25.3936 53 69 209 4744 217 25 Male 57.566 108 118 210 5386 241 21 Male 20.8761 80 94 211 5837 242 1 Female 33.3087 93 105 212 6247 228 13 Male 42.3162 77 80 213 1892 276 2 Male 21.7796 87 107 214 2882 262 18 Male 19.2334 94 90 215 3058 236 28 Male 22.2533 85 88 216 4342 263 1 Male 44.063 79 91 217 4865 240 35 Male 58.3354 93 105 218 5085 269 2 Male 49.0267 65 77 219 5222 247 30 Male 22.5298 88 85 220 5339 271 7 Male 21.8152 94 89 221 5474 280 2 Female 28.6598 99 91 222 5600 232 0 Male 48.7885 75 81 223 2826 290 14 Male 23.2334 94 108 224 4725 286 10 Male 32.9172 105 94 225 5204 299 0 Male 59.0746 99 105 226 6498 270 28 Male 24.0767 82 101 227 2081 185 43 Male 17.6975 77 97 228 4678 340 7 Male 46.6448 108 119 229 5397 328 0 Female 62.7981 121 108 230 6214 318 0 Male 60.3176 78 82 231 7034 280 60 Male 23.1376 78 80 232 1493 453 60 Male 17.8042 59 81 233 1836 375 1 Male 47.0554 101 108 234 1939 295 130 Male 28.2738 67 117 235 2646 438 14 Male 22.9158 98 94 236 2653 352 28 Male 30.0068 105 126 237 3226 444 0 Male 27.4552 76 64 238 3467 333 42 Male 25.3936 68 74 239 4342 432 1 Male 44.063 92 107 240 4542 431 11 Female 21.9576 98 114 241 4661 374 17 Female 30.8419 93 95 242 4902 397 8 Male 16.1424 92 86 243 4983 398 5 Male 38.3929 121 132 244 5111 442 7 Male 21.6947 77 86 245 5125 510 12 Male 17.5387 112 125 246 5289 417 1 Male 48.5722 83 83 247 5386 436 21 Male 20.8761 90 103 248 5387 480 12 Male 21.7988 94 116 249 5505 527 1 Male 65.4784 104 87 250 5580 369 7 Male 17.7933 96 107 251 5581 378 2 Male 26.3053 95 95 252 5599 443 21 Male 18.7488 78 80 253 5668 390 7 Male 40.9227 92 92 254 5680 403 1 Male 27.7563 94 93 255 5712 365 14 Male 22.2697 98 86 256 5772 412 35 Male 26.2587 102 104 257 5804 354 2 Female nan 122 105 258 5811 431 25 Male 80.0328 78 80 259 5841 415 8 Male 27.2279 82 83 260 6226 438 0 Male 36.8022 84 92 261 6247 389 13 Male 42.3162 82 80 262 6468 513 60 Male 43.4798 99 94 263 6614 362 0 Male 45.1116 88 106 264 6665 368 3 Female 23.0171 100 92 265 781 714 15 Male 29.8699 85 85 266 1048 576 94 Male 20.115 91 96 267 1157 810 23 Male 17.3881 97 84 268 1493 684 60 Male 17.8042 66 75 269 1611 511 60 Male 23.2799 69 107 270 1624 604 1 Male 19.5619 97 85 271 1939 562 130 Male 28.2738 85 111 272 2498 615 0 Female 17.4292 86 113 273 2826 636 14 Male 23.2334 111 101 274 2849 642 0 Male 20.0876 76 98 275 3032 525 20 Male 16.9391 79 87 276 3226 683 0 Male 27.4552 89 78 277 4218 814 28 Male 25.9904 99 96 278 4807 532 14 Female 47.7974 84 82 279 5014 637 7 Female 23.7618 101 114 280 5222 690 30 Male 22.5298 81 90 281 5253 591 1 Male 33.1335 114 124 282 5628 609 3 Female 30.2642 89 78 283 6059 794 1 Female 16.9801 71 76 284 6228 662 3 Female 31.5537 128 111 285 6247 616 13 Male 42.3162 85 82 286 405 986 0 Male 21.4702 66 116 287 626 870 55 Male 19.7536 80 85 288 1075 907 42 Female 27.2772 63 64 289 2849 1040 0 Male 20.0876 91 103 290 3032 884 20 Male 16.9391 87 93 291 3226 1123 0 Male 27.4552 88 81 292 4864 936 0 Female 53.9767 119 131 293 5474 1100 2 Female 28.6598 94 88 294 5568 1114 1 Female 51.9918 81 82 295 5580 1087 7 Male 17.7933 106 98 296 5581 1113 2 Male 26.3053 99 96 297 5617 1113 17 Male 19.7864 78 87 298 5642 1143 0 Male 65.87 104 109 299 5713 1016 8 Male 16.2683 126 106 300 5837 962 1 Female 33.3087 109 110 301 6140 1077 44 Female 21.4209 65 88 302 7061 923 0 Male 36.8816 74 81 303 651 1491 21 Male 22.0068 71 94 304 2527 1294 0 Male 16.9172 93 104 305 2638 1093 255 Male 16.5613 78 84 306 4865 1363 35 Male 58.3354 88 104 307 5009 1537 7 Male 24.3806 76 112 308 5014 1523 7 Female 23.7618 105 114 309 5085 1512 2 Male 49.0267 75 75 310 1939 1926 130 Male 28.2738 95 108 311 2662 1569 180 Male 28.0821 90 101 312 2826 1809 14 Male 23.2334 104 108 313 2882 1716 18 Male 19.2334 100 103 314 3768 1916 0 Male 19.1102 69 80 315 4356 2000 7 Male 21.399 104 91 316 4638 1779 17 Male 20.512 92 76 317 4696 1769 4 Male 46.9569 105 124 318 4744 1743 25 Male 57.566 97 118 319 6140 1742 44 Female 21.4209 67 87 320 1075 2259 42 Female 27.2772 78 79 321 1939 3111 130 Male 28.2738 88 111 322 2653 2191 28 Male 30.0068 117 129 323 3592 2569 10 Male 61.6646 76 93 324 3808 2434 7 Male 28.2683 105 111 325 651 3412 21 Male 22.0068 68 92 326 1939 3864 130 Male 28.2738 88 105 327 2600 3337 9 Male 43.9398 101 84 328 3835 4933 14 Male 25.9932 91 88 329 2773 7631 42 Male 6.51335 88 103 330 5142 11628 57 Male 16.4326 101 95 331 5964 11038 0 Male 12.8363 71 73","title":"Kedua"},{"location":"missing knn/#ketiga","text":"Pada langkah ini mengubah nilai dari fitur sex menjadi angak 0 / 1 dengan menggunakan fungsi dari sklearn, yaitu LabelEncode() . #encode fitur tipe biner X = data . iloc [:,:] . values labelEncode_X = LabelEncoder () X [:, 4 ] = labelEncode_X . fit_transform ( X [:, 4 ])","title":"Ketiga"},{"location":"missing knn/#keempat","text":"Selanjutnya kita mengimplementasikan rumus jarak ke dalam bentuk fungsi python. yaitu: eulidianDistance() dengan fungsi jarak tipe binary distanceSimetris (). def Zscore ( x , mean , std ): top = x - mean if top == 0 : return top else : return round ( top / std , 2 ) def normalisasi ( num , col_x ): return Zscore ( num , pd . Series ( data [ col_x ] . values ) . mean (), pd . Series ( data [ col_x ] . values ) . std ()) #menghitung jarak tipe numerikal def euclidianDistance ( x , y ): dis = 0 for i in range ( len ( x )): dis += ( x [ i ] - y [ i ]) ** 2 return round ( mt . sqrt ( dis ), 2 ) #Menghitung jarak tipe binary def distanceSimetris ( x , y ): q = r = s = t = 0 for i in range ( len ( x )): if x [ i ] == 1 and y [ i ] == 1 : q += 1 elif x [ i ] == 1 and y [ i ] == 0 : r += 1 elif x [ i ] == 0 and y [ i ] == 1 : s += 1 elif x [ i ] == 0 and y [ i ] == 0 : t += 1 return (( r + s ) / ( q + r + s + t ))","title":"Keempat"},{"location":"missing knn/#kelima","text":"Kemudian dari dataset tersebut, kita lakukan pengecekan dengan mencari baris yang missing values,. c_j = 0 for j in df [ 'age' ] . isna (): if j == True : col_missing = c_j c_j += 1","title":"Kelima"},{"location":"missing knn/#keenam","text":"Pada langkah berikut, kita lakukan perhitungan jarak pada data yang missing dengan seluruh tetangganya dan menampungnya pada dapat dictionary yang ada. missing_data = df . iloc [ col_missing , [ 2 , 3 , 6 , 7 ]] . values missing_normal = [ normalisasi ( missing_data [ 0 ], data . columns [ 2 ]), normalisasi ( missing_data [ 1 ], data . columns [ 3 ]), normalisasi ( missing_data [ 2 ], data . columns [ 6 ]), normalisasi ( missing_data [ 3 ], data . columns [ 7 ])] for i in range ( len ( data [ data . columns [ 0 ]])): if i == col_missing : continue ; select_data = df . iloc [ i , [ 2 , 3 , 6 , 7 ]] . values normal_data = [ normalisasi ( select_data [ 0 ], data . columns [ 2 ]), normalisasi ( select_data [ 1 ], data . columns [ 3 ]), normalisasi ( select_data [ 2 ], data . columns [ 6 ]), normalisasi ( select_data [ 3 ], data . columns [ 7 ])] data . loc [ i , 'jarak' ] = euclidianDistance ( missing_normal , normal_data ) + distanceSimetris ([ X [ col_missing , 4 ]],[ X [ i , 4 ]])","title":"Keenam"},{"location":"missing knn/#ketujuh","text":"Kemudian kita urutkan data tersebut berdasarkan jarak dari yang terkecil sampai ke terbesar. Selanjutnya kita mengisi data yang hilang dengan mengambil rata-rata dari 2 tetangga terdekat. df = pd . DataFrame ( data ) df . sort_values ( by = 'jarak' , axis = 0 , ascending = True , inplace = True ) df . iloc [ - 1 , [ 5 ]] = round ( df . iloc [ 0 : 2 , 5 ] . mean (), 2 ) df . style . hide_index () Berikut merupakan tampilan dari data yang telah di urutkan. pada baris terakhir telihat bahwa kolom age sudah terisi dengan angka 42.24 hasil dari rata-rata 2 tetangga terdekat. no id days duration sex age piq viq jarak 229 5397 328 0 Female 62.7981 121 108 0.25 13 4705 18 1 Female 21.6838 127 109 0.53 205 6228 174 3 Female 31.5537 114 108 0.6 284 6228 662 3 Female 31.5537 128 111 0.64 161 5699 138 1 Female 34.2231 110 107 0.84 153 4705 146 1 Female 21.6838 133 111 0.86 196 5208 193 8 Female 21.3771 133 111 0.88 300 5837 962 1 Female 33.3087 109 110 1.07 139 6253 128 0 Female 46.4038 104 112 1.31 141 6665 119 3 Female 23.0171 106 94 1.33 163 5804 159 2 Female 28.8515 102 107 1.35 20 5162 33 1 Male 25.0185 118 101 1.48 279 5014 637 7 Female 23.7618 101 114 1.56 129 5298 107 3 Male 22.9569 117 112 1.64 9 4253 40 3 Male 22.6037 115 110 1.66 308 5014 1523 7 Female 23.7618 105 114 1.67 299 5713 1016 8 Male 16.2683 126 106 1.68 48 2761 40 3 Female 24.3696 98 112 1.69 157 5014 151 7 Female 23.7618 97 110 1.72 264 6665 368 3 Female 23.0171 100 92 1.73 34 6163 21 1 Male 19.3593 112 106 1.73 240 4542 431 11 Female 21.9576 98 114 1.75 221 5474 280 2 Female 28.6598 99 91 1.82 28 5699 26 1 Female 34.2231 95 108 1.83 124 4941 131 4 Female 19.0144 96 96 1.85 211 5837 242 1 Female 33.3087 93 105 1.92 292 4864 936 0 Female 53.9767 119 131 1.93 273 2826 636 14 Male 23.2334 111 101 1.94 132 5414 105 10 Female 40.2765 93 104 1.96 45 7548 31 0 Male 24.3669 108 106 1.98 22 5208 31 8 Female 21.3771 97 90 2 135 5901 115 7 Male 22.1739 112 116 2.07 173 4253 175 3 Male 22.6037 114 118 2.08 158 5162 144 1 Male 25.0185 130 118 2.09 152 4696 150 4 Male 46.9569 120 120 2.1 241 4661 374 17 Female 30.8419 93 95 2.13 55 3655 57 5 Female 21.9055 90 103 2.14 202 6122 212 1 Male 56.2108 109 117 2.22 90 6686 44 14 Female 38.3491 90 100 2.22 23 5253 29 1 Male 33.1335 104 105 2.23 79 5474 65 2 Female 28.6598 95 86 2.26 188 6671 184 7 Female 27.8056 91 92 2.26 293 5474 1100 2 Female 28.6598 94 88 2.3 67 4755 24 18 Male 27.5127 105 102 2.33 175 4755 128 18 Male 27.5127 105 109 2.33 177 4892 148 21 Male 22.0397 106 110 2.35 295 5580 1087 7 Male 17.7933 106 98 2.35 50 3277 51 1 Male 37.4702 104 96 2.38 21 5174 38 4 Female 37.2704 87 99 2.38 228 4678 340 7 Male 46.6448 108 119 2.38 298 5642 1143 0 Male 65.87 104 109 2.41 224 4725 286 10 Male 32.9172 105 94 2.41 233 1836 375 1 Male 47.0554 101 108 2.41 168 1085 159 11 Male 30.7105 103 97 2.43 63 4482 58 14 Female 18.2341 86 103 2.44 272 2498 615 0 Female 17.4292 86 113 2.46 140 6433 120 4 Male 23.8604 100 103 2.48 281 5253 591 1 Male 33.1335 114 124 2.48 121 4542 121 11 Female 21.9576 86 114 2.5 66 4696 54 4 Male 46.9569 101 112 2.5 180 5125 173 12 Male 17.5387 106 119 2.51 225 5204 299 0 Male 59.0746 99 105 2.52 40 6937 18 0 Female 21.191 94 81 2.53 162 5713 144 8 Male 16.2683 100 99 2.55 159 5238 150 3 Male 45.1006 117 126 2.55 74 5238 44 3 Male 45.1006 99 103 2.55 43 7309 31 0 Female 50.6667 85 95 2.57 209 4744 217 25 Male 57.566 108 118 2.59 204 6175 278 1 Male 51.1704 99 98 2.6 17 4983 33 5 Male 38.3929 102 117 2.61 151 4678 143 7 Male 46.6448 98 107 2.62 245 5125 510 12 Male 17.5387 112 125 2.63 156 4983 146 5 Male 38.3929 107 123 2.64 94 7271 55 0 Male 41.7659 100 95 2.65 154 4802 142 0 Male 62.475 101 117 2.65 111 5837 82 1 Female 33.3087 82 110 2.69 73 5204 71 0 Male 59.0746 97 107 2.69 57 3919 58 1 Male 30.3655 99 95 2.7 150 4661 135 17 Female 30.8419 84 93 2.72 52 3359 59 9 Female 56.8953 84 91 2.72 53 3373 39 28 Female 26.308 87 91 2.73 250 5580 369 7 Male 17.7933 96 107 2.74 147 3728 151 6 Male 30.1273 96 105 2.74 249 5505 527 1 Male 65.4784 104 87 2.75 183 5581 176 2 Male 26.3053 96 110 2.76 170 3358 175 4 Male 20.6708 97 97 2.76 101 4744 65 25 Male 57.566 105 119 2.77 296 5581 1113 2 Male 26.3053 99 96 2.78 60 4183 42 3 Male 26.2341 98 116 2.8 312 2826 1809 14 Male 23.2334 104 108 2.82 190 2646 187 14 Male 22.9158 97 97 2.82 33 6122 29 1 Male 56.2108 95 103 2.82 235 2646 438 14 Male 22.9158 98 94 2.83 256 5772 412 35 Male 26.2587 102 104 2.84 41 6977 30 1 Male 36.2108 97 94 2.86 201 5916 205 0 Female 26.8556 92 76 2.87 65 4678 63 7 Male 46.6448 96 95 2.89 282 5628 609 3 Female 30.2642 89 78 2.91 192 4189 202 4 Female 29.462 81 90 2.91 223 2826 290 14 Male 23.2334 94 108 2.92 171 3808 165 7 Male 28.2683 94 111 2.92 251 5581 378 2 Male 26.3053 95 95 2.93 243 4983 398 5 Male 38.3929 121 132 2.93 181 5192 179 1 Male 58.6283 93 105 2.93 137 6173 125 4 Male 35.3046 94 97 2.95 107 5253 86 1 Male 33.1335 106 128 2.97 277 4218 814 28 Male 25.9904 99 96 2.97 114 5916 84 0 Female 26.8556 93 73 2.98 3 3547 40 1 Male 55.9151 95 116 2.98 313 2882 1716 18 Male 19.2334 100 103 2.99 182 5505 171 1 Male 65.4784 95 93 2.99 239 4342 432 1 Male 44.063 92 107 3 278 4807 532 14 Female 47.7974 84 82 3.03 25 5640 34 7 Male 25.9986 93 113 3.03 100 4725 124 10 Male 32.9172 93 97 3.04 254 5680 403 1 Male 27.7563 94 93 3.04 248 5387 480 12 Male 21.7988 94 116 3.05 62 4315 63 0 Male 38.141 107 130 3.05 92 7080 64 5 Female 76.6598 76 106 3.05 83 5628 51 3 Female 30.2642 81 85 3.07 304 2527 1294 0 Male 16.9172 93 104 3.09 8 3808 31 7 Male 28.2683 91 110 3.11 105 5125 78 12 Male 17.5387 94 118 3.12 236 2653 352 28 Male 30.0068 105 126 3.13 315 4356 2000 7 Male 21.399 104 91 3.13 289 2849 1040 0 Male 20.0876 91 103 3.14 255 5712 365 14 Male 22.2697 98 86 3.14 317 4696 1769 4 Male 46.9569 105 124 3.16 220 5339 271 7 Male 21.8152 94 89 3.18 160 5642 162 0 Male 65.87 89 103 3.19 324 3808 2434 7 Male 28.2683 105 111 3.2 172 4094 177 2 Male 19.7262 89 102 3.2 270 1624 604 1 Male 19.5619 97 85 3.2 253 5668 390 7 Male 40.9227 92 92 3.2 127 5154 120 5 Male 22.1903 89 109 3.21 214 2882 262 18 Male 19.2334 94 90 3.22 119 2653 97 28 Male 30.0068 93 112 3.23 191 2790 211 0 Male 48.8049 89 99 3.23 294 5568 1114 1 Female 51.9918 81 82 3.23 51 3346 44 18 Female 57.2758 79 85 3.25 263 6614 362 0 Male 45.1116 88 106 3.25 207 1176 216 17 Female 19.729 74 100 3.25 247 5386 436 21 Male 20.8761 90 103 3.25 29 5713 36 8 Male 16.2683 89 97 3.28 203 6136 216 1 Male 32.7912 92 89 3.29 217 4865 240 35 Male 58.3354 93 105 3.3 71 5014 46 7 Female 23.7618 75 90 3.3 35 6179 22 2 Male 38.0123 89 95 3.31 213 1892 276 2 Male 21.7796 87 107 3.33 91 6795 55 0 Male 30.7159 87 104 3.34 15 4802 36 0 Male 62.475 88 97 3.34 72 5192 60 1 Male 58.6283 87 97 3.4 61 4189 69 4 Female 29.462 75 86 3.4 267 1157 810 23 Male 17.3881 97 84 3.4 197 5456 193 14 Male 41.1636 87 110 3.4 165 6314 140 3 Male 16.6927 87 96 3.41 242 4902 397 8 Male 16.1424 92 86 3.42 155 4807 139 14 Female 47.7974 80 78 3.42 318 4744 1743 25 Male 57.566 97 118 3.43 93 7084 54 2 Male 36.5722 87 93 3.49 81 5580 56 7 Male 17.7933 86 95 3.5 131 5387 109 12 Male 21.7988 85 112 3.54 115 6410 80 14 Male 32.1725 85 98 3.55 82 5581 65 2 Male 26.3053 85 95 3.56 322 2653 2191 28 Male 30.0068 117 129 3.57 12 4542 22 11 Female 21.9576 71 89 3.58 1 3358 30 4 Male 20.6708 87 89 3.6 30 5736 18 9 Male 16.1478 89 86 3.6 290 3032 884 20 Male 16.9391 87 93 3.61 56 3762 48 6 Male 20.3559 85 93 3.61 80 5568 64 1 Female 51.9918 75 79 3.63 38 6870 22 0 Male 42.4832 84 95 3.63 84 6154 43 5 Female 22.6064 74 80 3.65 78 5458 44 14 Male 34.4778 84 95 3.66 46 2364 41 14 Male 25.8097 84 94 3.68 260 6226 438 0 Male 36.8022 84 92 3.68 39 6914 43 0 Male 61.5222 85 90 3.69 24 5298 30 3 Male 22.9569 87 86 3.7 31 5754 36 1 Male 16.3368 87 86 3.7 16 4941 46 4 Female 19.0144 69 88 3.72 185 5680 184 1 Male 27.7563 84 90 3.73 306 4865 1363 35 Male 58.3354 88 104 3.73 27 5680 17 1 Male 27.7563 84 90 3.74 2 3535 16 17 Male 55.2882 95 77 3.75 133 5494 111 7 Male 54.6913 86 86 3.75 36 6671 30 7 Female 27.8056 71 82 3.76 19 5154 35 5 Male 22.1903 82 95 3.76 199 5712 192 14 Male 22.2697 87 85 3.76 262 6468 513 60 Male 43.4798 99 94 3.81 149 4133 133 14 Male 20 82 94 3.81 89 6614 57 0 Male 45.1116 80 101 3.81 54 3544 32 14 Male 54.5298 81 98 3.81 176 4865 142 35 Male 58.3354 84 103 3.82 86 6314 58 3 Male 16.6927 80 99 3.82 77 5456 48 14 Male 41.1636 80 101 3.84 130 5339 119 7 Male 21.8152 87 82 3.85 187 6180 177 12 Male 20.7201 81 94 3.85 226 6498 270 28 Male 24.0767 82 101 3.85 143 1176 146 17 Female 19.729 65 98 3.85 42 7120 39 0 Male 69.7057 84 86 3.86 219 5222 247 30 Male 22.5298 88 85 3.87 10 4356 31 7 Male 21.399 86 83 3.87 68 4837 42 10 Male 19.6906 83 88 3.88 112 5879 75 21 Male 25.8453 80 105 3.89 265 781 714 15 Male 29.8699 85 85 3.89 76 5289 52 1 Male 48.5722 84 85 3.9 102 4807 64 14 Female 47.7974 74 74 3.9 291 3226 1123 0 Male 27.4552 88 81 3.9 215 3058 236 28 Male 22.2533 85 88 3.91 276 3226 683 0 Male 27.4552 89 78 3.92 145 2882 141 18 Male 19.2334 84 85 3.95 44 7321 23 0 Male 26.0041 84 83 3.97 283 6059 794 1 Female 16.9801 71 76 3.97 174 4638 140 17 Male 20.512 89 78 3.97 210 5386 241 21 Male 20.8761 80 94 3.98 285 6247 616 13 Male 42.3162 85 82 3.98 99 3844 73 9 Male 26.1164 79 94 3.98 178 5009 174 7 Male 24.3806 77 103 3.99 58 4094 50 2 Male 19.7262 79 93 3.99 246 5289 417 1 Male 48.5722 83 83 4.02 216 4342 263 1 Male 44.063 79 91 4.02 95 7371 55 1 Male 56.7858 80 88 4.04 122 4902 102 8 Male 16.1424 87 77 4.07 259 5841 415 8 Male 27.2279 82 83 4.08 274 2849 642 0 Male 20.0876 76 98 4.09 280 5222 690 30 Male 22.5298 81 90 4.11 320 1075 2259 42 Female 27.2772 78 79 4.13 108 5386 78 21 Male 20.8761 78 93 4.13 14 4744 15 25 Male 57.566 82 85 4.15 75 5280 83 1 Male 48.6434 78 88 4.16 194 4933 226 0 Male 18.4559 79 86 4.16 316 4638 1779 17 Male 20.512 92 76 4.18 195 4962 210 1 Female 25.1964 71 70 4.19 18 5129 26 1 Male 25.0459 77 89 4.2 275 3032 525 20 Male 16.9391 79 87 4.2 261 6247 389 13 Male 42.3162 82 80 4.21 189 2124 173 30 Male 30.7625 76 106 4.23 198 5668 219 7 Male 40.9227 76 90 4.23 11 4384 35 8 Male 36.3806 76 90 4.24 307 5009 1537 7 Male 24.3806 76 112 4.26 244 5111 442 7 Male 21.6947 77 86 4.28 169 3237 189 9 Male 49.8508 79 82 4.3 297 5617 1113 17 Male 19.7864 78 87 4.3 301 6140 1077 44 Female 21.4209 65 88 4.32 327 2600 3337 9 Male 43.9398 101 84 4.33 128 5222 93 30 Male 22.5298 77 91 4.33 230 6214 318 0 Male 60.3176 78 82 4.34 103 4892 62 21 Male 22.0397 76 88 4.36 319 6140 1742 44 Female 21.4209 67 87 4.36 227 2081 185 43 Male 17.6975 77 97 4.42 206 7173 210 4 Male 24.9801 79 78 4.44 104 4962 63 1 Female 25.1964 69 67 4.44 120 4218 82 28 Male 25.9904 74 92 4.47 252 5599 443 21 Male 18.7488 78 80 4.48 106 5222 63 30 Male 22.5298 77 85 4.48 164 5818 125 14 Male 34.9268 72 91 4.49 212 6247 228 13 Male 42.3162 77 80 4.49 258 5811 431 25 Male 80.0328 78 80 4.52 222 5600 232 0 Male 48.7885 75 81 4.55 109 5534 87 14 Male 29.2621 75 82 4.55 186 5782 108 68 Female 19.6715 69 85 4.56 69 4996 51 12 Male 43.0281 77 78 4.58 64 4638 20 17 Male 20.512 82 72 4.59 32 5776 26 8 Male 17.128 71 88 4.6 302 7061 923 0 Male 36.8816 74 81 4.64 303 651 1491 21 Male 22.0068 71 94 4.67 59 4133 34 14 Male 20 70 88 4.69 117 7221 98 0 Male 63.5044 74 79 4.69 37 6859 27 1 Male 34.2122 74 79 4.69 323 3592 2569 10 Male 61.6646 76 93 4.72 179 5111 177 7 Male 21.6947 72 81 4.73 287 626 870 55 Male 19.7536 80 85 4.75 7 3807 37 5 Male 24.6762 74 77 4.76 136 6135 96 18 Male 26.5626 66 105 4.76 184 5599 148 21 Male 18.7488 72 81 4.8 26 5668 27 7 Male 40.9227 72 79 4.81 286 405 986 0 Male 21.4702 66 116 4.82 126 5111 107 7 Male 21.6947 71 80 4.82 193 4775 180 28 Male 53.5551 70 86 4.83 123 4933 134 0 Male 18.4559 69 83 4.85 87 6340 71 0 Male 19.3238 76 72 4.85 98 3645 43 45 Male 27.4935 72 90 4.86 309 5085 1512 2 Male 49.0267 75 75 4.91 118 2453 120 10 Male 37.2758 63 99 4.94 116 7173 84 4 Male 24.9801 72 75 4.94 142 6834 123 0 Male 30.7488 72 75 4.94 85 6180 59 12 Male 20.7201 67 84 4.96 148 3913 96 42 Female 23.9233 56 80 4.96 47 2600 3333 9 Male 43.9398 86 80 4.97 6 3790 13 3 Male 57.0623 76 69 4.99 113 5893 71 21 Male 22.8118 65 90 4.99 200 5893 200 21 Male 22.8118 65 89 5.01 70 5009 50 7 Male 24.3806 61 104 5.05 146 3051 131 13 Male 37.2403 68 79 5.05 231 7034 280 60 Male 23.1376 78 80 5.07 288 1075 907 42 Female 27.2772 63 64 5.12 266 1048 576 94 Male 20.115 91 96 5.14 269 1611 511 60 Male 23.2799 69 107 5.16 314 3768 1916 0 Male 19.1102 69 80 5.16 237 3226 444 0 Male 27.4552 76 64 5.21 134 5896 126 4 Female 26.8775 50 74 5.25 88 6564 69 0 Male 34.4997 67 74 5.26 218 5085 269 2 Male 49.0267 65 77 5.26 5 3728 19 6 Male 30.1273 67 73 5.3 166 6664 164 2 Male 24.7337 66 73 5.34 110 5712 88 14 Male 22.2697 70 68 5.36 138 6214 112 0 Male 60.3176 65 74 5.37 125 5085 117 2 Male 49.0267 67 71 5.38 97 3058 56 28 Male 22.2533 65 75 5.45 238 3467 333 42 Male 25.3936 68 74 5.46 49 3237 65 9 Male 49.8508 67 67 5.55 325 651 3412 21 Male 22.0068 68 92 5.62 328 3835 4933 14 Male 25.9932 91 88 5.69 4 3592 13 10 Male 61.6646 59 73 5.77 268 1493 684 60 Male 17.8042 66 75 5.83 144 2849 151 0 Male 20.0876 51 86 5.89 96 2569 49 35 Male 18.7159 50 101 5.94 232 1493 453 60 Male 17.8042 59 81 6.03 310 1939 1926 130 Male 28.2738 95 108 6.41 208 3467 186 42 Male 25.3936 53 69 6.45 167 1048 85 94 Male 20.115 63 82 6.51 271 1939 562 130 Male 28.2738 85 111 6.51 321 1939 3111 130 Male 28.2738 88 111 6.93 234 1939 295 130 Male 28.2738 67 117 7.17 326 1939 3864 130 Male 28.2738 88 105 7.22 329 2773 7631 42 Male 6.51335 88 103 7.96 311 2662 1569 180 Male 28.0821 90 101 8.24 331 5964 11038 0 Male 12.8363 71 73 11.23 330 5142 11628 57 Male 16.4326 101 95 11.25 305 2638 1093 255 Male 16.5613 78 84 11.27 257 5804 354 2 Female 42.24 122 105 nan","title":"Ketujuh"}]}